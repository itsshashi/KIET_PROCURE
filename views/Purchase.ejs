<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Purchase Orders Management</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    .quotation-list {
      max-height: 300px;
      overflow-y: auto;
    }
    .quotation-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px;
      border: 1px solid #e5e7eb;
      border-radius: 6px;
      margin-bottom: 8px;
      background: #f9fafb;
    }
    .quotation-item:hover {
      background: #f3f4f6;
    }
    .status-badge {
      padding: 4px 12px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: 500;
    }
    .status-pending { background: #fef3c7; color: #d97706; }
    .status-approved { background: #d1fae5; color: #065f46; }
    .status-purchase { background: #dbeafe; color: #1e40af; }
    .status-sent { background: #e0e7ff; color: #3730a3; }
    .status-received { background: #ecfdf5; color: #047857; }
    .status-rejected { background: #fee2e2; color: #b91c1c; }
    .status-inventory_processed { background: #ccfbf1; color: #0f766e; }
    .status-paid { background: #e9d5ff; color: #7c3aed; }
    .blink {
      animation: blink 1s infinite;
    }
    @keyframes blink {
      0% { opacity: 1; }
      50% { opacity: 0; }
      100% { opacity: 1; }
    }
    .bg-red-modal {
      background-color: #fef2f2 !important;
    }
  </style>
</head>
<body class="bg-blue-100 p-6">
  <div class="max-w-7xl mx-auto">
   <div class="mb-6">
  <!-- Top bar -->
  <div class="flex justify-between items-center mb-3">
    <!-- Logo -->
    <div>
      <img src="images/page_logo.png" alt="Company_logo" class="h-20">
    </div>

    <!-- Right side: user + logout -->
    <div class="flex items-center gap-6">
      <div class="flex items-center gap-2 text-gray-600">
        <i class="fas fa-user-circle text-2xl"></i>
        <span class="text-sm font-medium">purchase@kietsindia.com</span>
      </div>
      <form action="/logout" method="POST">
        <button type="submit" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium transition-colors duration-200 flex items-center gap-2">
          <i class="fas fa-sign-out-alt"></i>
          Logout
        </button>
      </form>
    </div>
  </div>

  <!-- Page Title -->
  <h1 class="text-3xl font-bold text-gray-800 text-center flex items-center justify-center gap-2">
    üìë <span>Purchase Orders Management</span>
  </h1>
</div>

  <!-- Tabs -->
  <div class="bg-white shadow-md rounded-lg mb-6">
    <div class="border-b border-gray-200">
      <nav class="flex">
        <button id="allOrdersTab" class="tab-button active px-6 py-3 text-sm font-medium text-blue-600 border-b-2 border-blue-600 bg-blue-50" onclick="switchTab('allOrders')">
          <i class="fas fa-list mr-2"></i>All Orders
        </button>
        <button id="approveOrdersTab" class="tab-button px-6 py-3 text-sm font-medium text-gray-500 hover:text-gray-700 border-b-2 border-transparent hover:border-gray-300" onclick="switchTab('approveOrders')">
          <i class="fas fa-check-circle mr-2"></i>Approve Orders
        </button>
      </nav>
    </div>

    <!-- All Orders Tab Content -->
    <div id="allOrdersContent" class="tab-content p-6">
      <!-- Filters -->
      <div class="bg-gray-50 p-4 rounded-lg mb-6">
          <div class="grid grid-cols-1 md:grid-cols-6 gap-4">
          <input type="text" id="searchInput" placeholder="Search by Order ID or Project..." class="border p-2 rounded">
          <select id="supplierFilter" class="border p-2 rounded">
            <option value="">All Suppliers</option>
          </select>
          <select id="statusFilter" class="border p-2 rounded">
            <option value="">All Statuses</option>
            <option value="pending">Pending</option>
            <option value="purchase">Purchase</option>
            <option value="approved">Approved</option>
            <option value="rejected">Rejected</option>
            <option value="sent">Sent</option>
            <option value="received">Received</option>
          </select>
          <input type="date" id="fromDateFilter" class="border p-2 rounded" placeholder="From Date" />
          <input type="date" id="toDateFilter" class="border p-2 rounded" placeholder="To Date" />
          <button onclick="applyFilters()" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
            <i class="fas fa-search mr-2"></i>Filter
          </button>
        </div>
      </div>

      <!-- Table -->
      <div class="overflow-x-auto bg-white shadow-md rounded-lg">
        <table class="min-w-full w-full text-sm text-center">
          <thead class="bg-gray-200 text-gray-600 uppercase text-xs">
            <tr>
              <th class="px-2 py-3">Order ID</th>
              <th class="px-2 py-3">Project</th>
              <th class="px-2 py-3">Supplier</th>
              <th class="px-2 py-3">Requested By</th>
              <th class="px-2 py-3">Date Required</th>
              <th class="px-2 py-3">Amount</th>
              <th class="px-2 py-3">Status</th>
              <th class="px-2 py-3">Quotations</th>
              <th class="px-2 py-3">Actions</th>
            </tr>
          </thead>
          <tbody id="ordersTable" class="divide-y divide-gray-200"></tbody>
        </table>
      </div>
    </div>

    <!-- Approve Orders Tab Content -->
    <div id="approveOrdersContent" class="tab-content p-6 hidden">
      <div class="mb-6">
        <h2 class="text-xl font-semibold text-gray-800 mb-4">üìã Pending Orders for Approval</h2>
        <p class="text-sm text-gray-600">Review and approve purchase orders that are pending approval.</p>
      </div>

      <!-- Pending Orders Table -->
      <div class="overflow-x-auto bg-white shadow-md rounded-lg">
        <table class="min-w-full w-full text-sm text-center">
          <thead class="bg-gray-200 text-gray-600 uppercase text-xs">
            <tr>
              <th class="px-2 py-3">Order ID</th>
              <th class="px-2 py-3">Project</th>
              <th class="px-2 py-3">Supplier</th>
              <th class="px-2 py-3">Requested By</th>
              <th class="px-2 py-3">Date Required</th>
              <th class="px-2 py-3">Amount</th>
              <th class="px-2 py-3">Quotations</th>
              <th class="px-2 py-3">Actions</th>
            </tr>
          </thead>
          <tbody id="pendingOrdersTable" class="divide-y divide-gray-200"></tbody>
        </table>
      </div>
    </div>
  </div>
  </div>

  <!-- View Quotations Modal -->
  <div id="viewModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white rounded-lg shadow-xl w-4/5 max-w-4xl p-6 max-h-[90vh] overflow-y-auto">
      <div class="flex justify-between items-center border-b pb-4 mb-6">
        <h2 class="text-xl font-semibold text-gray-800">üìÑ View All Quotations</h2>
        <button onclick="closeView()" class="text-red-500 hover:text-red-700 text-2xl font-bold">&times;</button>
      </div>

      <div id="quotationsList" class="quotation-list space-y-4">
        <!-- Quotations will be loaded here -->
      </div>

      <div class="flex justify-end gap-3 mt-6">
        <button onclick="closeView()" class="px-4 py-2 bg-gray-400 rounded text-white hover:bg-gray-500">Close</button>
      </div>
    </div>
  </div>

  <!-- Edit Order Modal -->
  <div id="editModal" class="hidden fixed inset-0 bg-transparent flex items-center justify-center z-50">
    <div class="bg-white rounded-lg shadow-xl w-20/22 max-w-7xl p-6 max-h-[98vh] overflow-y-auto">
      <div class="flex justify-between items-center border-b pb-4 mb-6">
        <h2 class="text-xl font-semibold text-gray-800">‚úèÔ∏è Edit Order Details</h2>
        <button onclick="closeEdit()" class="text-red-500 hover:text-red-700 text-2xl font-bold">&times;</button>
      </div>



      <form id="editOrderForm" class="space-y-4">
        <div class="bg-gray-50 p-4 rounded-lg border">
          <h3 class="text-lg font-semibold text-gray-800 mb-2" id="editProjectName">Project Name</h3>
          <p class="text-sm text-gray-600" id="editProjectCode">Project Code</p>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Supplier Name *</label>
            <input type="text" id="editSupplierName" class="w-full border border-gray-300 p-2 rounded focus:ring-2 focus:ring-blue-500" required>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Supplier GST *</label>
            <input type="text" id="editSupplierGst" class="w-full border border-gray-300 p-2 rounded focus:ring-2 focus:ring-blue-500" required>
          </div>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Supplier Address *</label>
          <textarea id="editSupplierAddress" rows="3" class="w-full border border-gray-300 p-2 rounded focus:ring-2 focus:ring-blue-500" required></textarea>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Payment Terms</label>
          <input type="text" id="editPaymentTerms" class="w-full border border-gray-300 p-2 rounded focus:ring-2 focus:ring-blue-500" placeholder="e.g., Net 30 days">
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Expected Date</label>
          <input type="date" id="editExpectedDate" class="w-full border border-gray-300 p-2 rounded focus:ring-2 focus:ring-blue-500">
        </div>

        <div class="flex items-center gap-2">
          <input type="checkbox" id="editSingleSupplier" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500" >
          <label for="editSingleSupplier" class="text-sm font-medium text-gray-700">Single Supplier</label>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        </div>

        <div>
           <div class="flex justify-between items-center mb-2">
+            <label class="block text-sm font-medium text-gray-700">Product Details</label>
+            <button type="button" onclick="addNewProductRow()" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 flex items-center gap-2">
+              <i class="fas fa-plus"></i>Add Product
+            </button>
+          </div>
          <table class="product-table min-w-full text-sm text-left border border-gray-300 rounded" id="editProductTable">
            <thead class="bg-gray-200 text-gray-600 uppercase text-xs">
              <tr>
                <th class="px-6 py-3 border">SL No</th>
                <th class="px-6 py-3 border">Part No</th>
                <th class="px-6 py-3 border">Description</th>
                <th class="px-6 py-3 border">HSN Code</th>
                <th class="px-6 py-3 border">Quantity</th>
                <th class="px-6 py-3 border">Unit Price (‚Çπ)</th>
                <th class="px-6 py-3 border">GST %</th>
                <th class="px-6 py-3 border">Unit</th>
                <th class="px-6 py-3 border">Discount</th>
                <th class="px-6 py-3 border">Total (‚Çπ)</th>
                <th class="px-6 py-3 border">Actions</th>
              </tr>
            </thead>
            <tbody id="editProductTableBody">
              <!-- Rows will be dynamically populated -->
            </tbody>
          <tfoot id="editProductTableFooter" class="bg-gray-100">
            <tr>
              <td colspan="10" class="px-4 py-2 border font-semibold text-right">Grand Total:</td>
              <td class="px-4 py-2 border font-bold text-lg" id="editGrandTotal">‚Çπ0.00</td>
            </tr>
          </tfoot>
          </table>
        </div>

        <!-- Notes Display -->
        <div class="mt-6 p-4 border border-gray-300 rounded bg-gray-50">
          <label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
          <div id="editNotesDisplay" class="whitespace-pre-wrap text-gray-700 bg-white p-3 rounded border border-gray-300 min-h-[80px]"></div>
        </div>



        <!-- Upload New Quotation -->
        <div class="border-t pt-4">
          <h3 class="text-lg font-medium text-gray-800 mb-3">üìé Upload New Quotation</h3>
          <input type="file" id="newQuotationFile" class="w-full border border-gray-300 p-2 rounded focus:ring-2 focus:ring-blue-500" accept="application/pdf" multiple>
          <p class="text-sm text-gray-500 mt-1">Select multiple PDF files to upload new quotations</p>
        </div>

        <div class="flex justify-end gap-3 pt-4 border-t">
          <button type="button" onclick="closeEdit()" class="px-4 py-2 bg-gray-400 rounded text-white hover:bg-gray-500">Cancel</button>
          <button type="submit" class="px-6 py-2 bg-blue-600 rounded text-white hover:bg-blue-700">
            <i class="fas fa-save mr-2"></i>Save Changes
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Quotation Preview Modal -->
  <div id="quotationPreviewModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white rounded-lg shadow-xl w-5/6 max-w-5xl p-4 max-h-[95vh]">
      <div class="flex justify-between items-center border-b pb-2 mb-4">
        <h2 class="text-lg font-semibold" id="previewTitle">Quotation Preview</h2>
        <div class="flex items-center gap-2">
          <a id="downloadLink" class="text-blue-500 hover:text-blue-700 text-xl" title="Download" download>
            <i class="fas fa-download"></i>
          </a>
          <button onclick="closePreview()" class="text-red-500 hover:text-red-700 text-2xl font-bold">&times;</button>
        </div>
      </div>
      <iframe id="quotationIframe" class="w-full h-[600px] border rounded" frameborder="0"></iframe>
    </div>
  </div>

  <script>
    const API_URL = "https://kietprocure.com/api/orders";
    let currentEditId = null;
    let allOrders = [];
    let filteredOrders = [];

    // Load orders on page load
    document.addEventListener('DOMContentLoaded', function() {
      loadOrders();
      setupFilters();
      setupTabs();
    });

    async function loadOrders() {
      try {
        const res = await fetch(API_URL);
        if (!res.ok) throw new Error('Failed to fetch orders');

        allOrders = await res.json();
        filteredOrders = [...allOrders];

        populateSupplierFilter();
        renderOrdersTable();
        renderPendingOrdersTable();

        // Check for edit parameter in URL
        const urlParams = new URLSearchParams(window.location.search);
        const editId = urlParams.get('edit');
        if (editId) {
          const orderId = parseInt(editId);
          const order = allOrders.find(o => o.id === orderId);
          if (order) {
            editOrder(orderId);
          }
        }
      } catch (error) {
        console.error('Error loading orders:', error);
        document.getElementById("ordersTable").innerHTML =
          '<tr><td colspan="10" class="text-center py-8 text-red-500">Failed to load orders. Please try again.</td></tr>';
      }
    }

    function populateSupplierFilter() {
      const supplierFilter = document.getElementById('supplierFilter');
      const suppliers = [...new Set(allOrders.map(order => order.supplier).filter(Boolean))];

      suppliers.forEach(supplier => {
        const option = document.createElement('option');
        option.value = supplier;
        option.textContent = supplier;
        supplierFilter.appendChild(option);
      });
    }

      function setupFilters() {
      document.getElementById('searchInput').addEventListener('input', applyFilters);
      document.getElementById('supplierFilter').addEventListener('change', applyFilters);
      document.getElementById('statusFilter').addEventListener('change', applyFilters);
      document.getElementById('fromDateFilter').addEventListener('change', applyFilters);
      document.getElementById('toDateFilter').addEventListener('change', applyFilters);
    }

      function applyFilters() {
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      const supplierFilter = document.getElementById('supplierFilter').value;
      const statusFilter = document.getElementById('statusFilter').value;
      const fromDateFilter = document.getElementById('fromDateFilter').value;
      const toDateFilter = document.getElementById('toDateFilter').value;

      filteredOrders = allOrders.filter(order => {
        const matchesSearch = !searchTerm ||
          order.order_id.toLowerCase().includes(searchTerm) ||
          order.project.toLowerCase().includes(searchTerm);

        const matchesSupplier = !supplierFilter || order.supplier === supplierFilter;
        const matchesStatus = !statusFilter || order.status === statusFilter;

        let matchesDate = true;
        if (fromDateFilter) {
          matchesDate = new Date(order.date_required) >= new Date(fromDateFilter);
        }
        if (matchesDate && toDateFilter) {
          matchesDate = new Date(order.date_required) <= new Date(toDateFilter);
        }

        return matchesSearch && matchesSupplier && matchesStatus && matchesDate;
      });

      renderOrdersTable();
    }

    function renderOrdersTable() {
      const tbody = document.getElementById("ordersTable");
      tbody.innerHTML = "";

      if (filteredOrders.length === 0) {
        tbody.innerHTML = '<tr><td colspan="10" class="text-center py-8 text-gray-500">No orders found matching your criteria.</td></tr>';
        return;
      }

      filteredOrders.forEach(order => {
        const tr = document.createElement("tr");
        tr.className = "hover:bg-gray-50";

        const statusBadgeClass = `status-badge status-${order.status}`;

        // Properly convert single field to boolean
        const isSingleSupplier = order.single === true || order.single === 'true' || order.single === 1;

        tr.innerHTML = `
          <td class="px-2 py-3 font-medium">${order.order_id}</td>
          <td class="px-2 py-3">${order.project}</td>
          <td class="px-2 py-3">${order.supplier}</td>
          <td class="px-2 py-3">${order.requested_by}</td>
          <td class="px-2 py-3">${formatDate(order.date_required)}</td>
          <td class="px-2 py-3 font-semibold">‚Çπ${order.total_amount.toLocaleString()}</td>
          <td class="px-2 py-3">
            <span class="${statusBadgeClass}">${capitalizeFirst(order.status)}</span>
          </td>

          <td class="px-2 py-3">
            <div class="flex items-center gap-2">
              <i class="fas fa-file-pdf text-red-500"></i>
              <span class="text-sm text-gray-600">${order.quotation_file && order.quotation_file.length > 0 ? order.quotation_file.length + ' file' + (order.quotation_file.length > 1 ? 's' : '') : 'No files'}</span>
            </div>
          </td>
          <td class="px-2 py-3">
            <div class="flex gap-2">
              <button onclick="viewQuotations(${order.id})" class="w-20 px-3 py-1 bg-blue-500 text-white rounded text-sm hover:bg-blue-600 transition flex items-center justify-center">
                <i class="fas fa-eye mr-1"></i>View
              </button>
   <button 
  onclick="editOrder(${order.id})" 
  id="editBtn-${order.id}" 
  class="w-20 px-3 py-1 
         ${isSingleSupplier ? 'bg-red-600 hover:bg-red-700' : 'bg-green-600 hover:bg-green-700'} 
         text-white rounded text-sm transition flex items-center justify-center"
>
  <i class="fas fa-edit mr-1"></i>Edit
</button>

   
              <button onclick="generatePO(${order.id})" class="w-20 px-3 py-1 ${(order.status === 'pending' || order.status === 'purchase') ? 'bg-gray-400' : 'bg-blue-600 hover:bg-blue-700'} text-white rounded text-sm transition flex items-center justify-center" ${(order.status === 'pending' || order.status === 'purchase') ? 'disabled' : ''}>
                <i class="fas fa-file-invoice mr-1"></i>P O
              </button>
            </div>
          </td>
        `;

        tbody.appendChild(tr);
      });
    }

    function formatDate(dateString) {
      if (!dateString) return 'N/A';
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      });
    }

    function capitalizeFirst(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }

    // View All Quotations
    async function viewQuotations(orderId) {
      const order = allOrders.find(o => o.id === orderId);
      if (!order) return;

      const quotationsList = document.getElementById('quotationsList');
      quotationsList.innerHTML = '';

      if (order.quotation_file && order.quotation_file.length > 0) {
        order.quotation_file.forEach((fileName, index) => {
          const quotationItem = document.createElement('div');
          quotationItem.className = 'quotation-item';
          quotationItem.innerHTML = `
            <div class="flex items-center gap-3">
              <span class="text-lg font-bold text-blue-600">${index + 1}.</span>
              <i class="fas fa-file-pdf text-red-500 text-lg"></i>
              <div>
                <p class="font-medium text-gray-800">${fileName}</p>
                <p class="text-sm text-gray-500">Uploaded on ${formatDate(order.created_at)}</p>
              </div>
            </div>
            <button onclick="previewQuotation('${fileName}')" class="px-3 py-1 bg-blue-500 text-white rounded text-sm hover:bg-blue-600">
              <i class="fas fa-eye mr-1"></i>Preview
            </button>
          `;
          quotationsList.appendChild(quotationItem);
        });
      } else {
        quotationsList.innerHTML = '<p class="text-gray-500 text-center py-4">No quotations available for this order.</p>';
      }

      document.getElementById('viewModal').classList.remove('hidden');
    }

    function closeView() {
      document.getElementById('viewModal').classList.add('hidden');
    }

    // Preview Single Quotation
    function previewQuotation(fileName) {
      document.getElementById('previewTitle').textContent = `Preview: ${fileName}`;
      document.getElementById('quotationIframe').src = `/uploads/${fileName}`;
      document.getElementById('downloadLink').href = `/uploads/${fileName}`;
      document.getElementById('quotationPreviewModal').classList.remove('hidden');
    }

    function closePreview() {
      document.getElementById('quotationPreviewModal').classList.add('hidden');
      document.getElementById('quotationIframe').src = '';
      document.getElementById('downloadLink').href = '';
    }

    // Edit Order
    async function editOrder(orderId) {
      currentEditId = orderId;
      const order = allOrders.find(o => o.id === orderId);
      if (!order) return;

      try {
        let items = [];

        // Use products from order if available, else fetch items
        if (order.products && order.products.length > 0) {
          items = order.products;
        } else {
          // Fetch product items for this order
          const itemsResponse = await fetch(`${API_URL}/${orderId}/items`);
          items = await itemsResponse.json();
        }

        console.log('Order products/items:', items); // Added for debugging keys

        // Debug HSN code values
        if (items && items.length > 0) {
          items.forEach((item, index) => {
            console.log(`Item ${index + 1} HSN values:`, {
              hsn: item.hsn,
              hsnCode: item.hsnCode,
              hsn_code: item.hsn_code,
              allKeys: Object.keys(item)
            });
          });
        }

        // Populate form fields
        document.getElementById('editProjectName').textContent = order.project;
        document.getElementById('editProjectCode').textContent = order.projectcodenumber || '';
        document.getElementById('editSupplierName').value = order.supplier;
        document.getElementById('editSupplierGst').value = order.supplier_gst || '';
        document.getElementById('editSupplierAddress').value = order.supplier_address || '';
        document.getElementById('editPaymentTerms').value = order.payment_terms || '';
        let expectedDate = '';
        if (order.date_required) {
          const date = new Date(order.date_required);
          expectedDate = date.toISOString().split('T')[0];
        }
        document.getElementById('editExpectedDate').value = expectedDate;

        // Set single supplier checkbox
        document.getElementById('editSingleSupplier').checked = order.single || false;

        // Populate product table with items from order or fetched
        populateEditProductTable(order, items);

        // Populate notes display (non-editable)
        const notesDisplay = document.getElementById('editNotesDisplay');
        if (order.notes && order.notes.trim() !== '') {
          notesDisplay.textContent = order.notes;
        } else {
          notesDisplay.textContent = 'No notes available.';
        }

        document.getElementById('editModal').classList.remove('hidden');
      } catch (error) {
        console.error('Error fetching order items:', error);
        alert('Failed to load order details. Please try again.');
      }
    }

    function closeEdit() {
      document.getElementById('editModal').classList.add('hidden');
      document.getElementById('editOrderForm').reset();
    }



    // Handle Edit Form Submission
    document.getElementById('editOrderForm').addEventListener('submit', async function(e) {
      e.preventDefault();

      // Collect product details
      const products = [];
      const productRows = document.querySelectorAll('#editProductTableBody tr');

      productRows.forEach(row => {
       const product = {
  partNo: row.querySelector('.edit-part-no').value,
  description: row.querySelector('.edit-description').value,
  hsnCode: row.querySelector('.edit-hsnCode').value,
  quantity: row.querySelector('.edit-quantity').value,
  unitPrice: row.querySelector('.edit-unit-price').value,
  gst: row.querySelector('.edit-gst').value,
  unit: row.querySelector('.edit-unit').value,
  discount: row.querySelector('.edit-discount').value
};

products.push(product);

      });

      const formData = {
        supplier_name: document.getElementById('editSupplierName').value,
        supplier_gst: document.getElementById('editSupplierGst').value,
        supplier_address: document.getElementById('editSupplierAddress').value,
        payment_terms: document.getElementById('editPaymentTerms').value,
        expected_date: document.getElementById('editExpectedDate').value,
        
      };

      try {
        // Update order details
        const response = await fetch(`${API_URL}/${currentEditId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'          },
          body: JSON.stringify(formData)
        });

        if (!response.ok) throw new Error('Failed to update order');

        // Update product items
        const itemsResponse = await fetch(`${API_URL}/${currentEditId}/items`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
        
          body: JSON.stringify({ products })
        });
        

        if (!itemsResponse.ok) throw new Error('Failed to update product items');

        // Handle file uploads if any
        const files = document.getElementById('newQuotationFile').files;
        if (files.length > 0) {
          const fileFormData = new FormData();
          for (let file of files) {
            fileFormData.append('quotations', file);
          }

          const fileResponse = await fetch(`${API_URL}/${currentEditId}/quotations`, {
            method: 'POST',
            body: fileFormData
          });

          if (!fileResponse.ok) {
            
            console.warn('File upload failed, but order details were updated');
          }
        }

        alert('Order updated successfully! ‚úÖ');
        closeEdit();
        loadOrders();

      } catch (error) {
        console.error('Error updating order:', error);
        alert('Failed to update order. Please try again.');
      }
    });

    // Approve Order
    async function approveOrder(orderId) {
      if (!confirm('Are you sure you want to approve this order?')) return;

      try {
        const response = await fetch(`${API_URL}/${orderId}/purchase`, {
          method: 'PUT'
        });

        if (!response.ok) throw new Error('Failed to approve order');

        alert('Order approved successfully! ‚úÖ');
        loadOrders();

      } catch (error) {
        console.error('Error approving order:', error);
        alert('Failed to approve order. Please try again.');
      }
    }

    // Close modals when clicking outside
    document.addEventListener('click', function(e) {
      const viewModal = document.getElementById('viewModal');
      const editModal = document.getElementById('editModal');
      const previewModal = document.getElementById('quotationPreviewModal');

      if (e.target === viewModal) closeView();
      if (e.target === editModal) closeEdit();
      if (e.target === previewModal) closePreview();
    });

    // Product table functions for edit modal
    function populateEditProductTable(order, items = []) {
      const tbody = document.getElementById('editProductTableBody');
      tbody.innerHTML = '';

      if (items && items.length > 0) {
        items.forEach((product, index) => {
          addEditProductRow(product, index + 1);
        });
      } else {
        addEditProductRow(null, 1);
      }

      calculateEditTotal();
    }

    function addEditProductRow(product = null, slNo = null) {
      const tbody = document.getElementById('editProductTableBody');
      const row = document.createElement('tr');

      if (!slNo) {
        const rows = tbody.querySelectorAll('tr');
        slNo = rows.length + 1;
      }

      console.log('Adding product row:', product); // Added for debugging

      row.innerHTML = `
        <td class="px-6 py-3 border text-center">${slNo}</td>
        <td class="px-6 py-3 border">
          <input type="text" class="w-full border border-gray-300 p-1 text-sm edit-part-no" value="${product ? ( product.partno  || '') : ''}" placeholder="Part No" >
        </td>
<td class="px-6 py-3 border">
  <input type="text" class="w-full border border-gray-300 p-1 text-sm edit-description" value="${product ? product.description || '' : ''}" placeholder="Description">
</td>
        <td class="px-6 py-3 border">
          <input type="text" class="w-full border border-gray-300 p-1 text-sm edit-hsnCode" value="${product ? (product.hsncode ||product.hsn || product.hsnCode || product.hsn_code || '') : ''}" placeholder="HSN Code">
        </td>
        <td class="px-6 py-3 border">
          <input type="number" class="w-full border border-gray-300 p-1 text-sm edit-quantity" value="${product ? product.quantity|| '' : ''}" placeholder="Qty" min="1">
        </td>
        <td class="px-6 py-3 border">
          <input type="number" class="w-full border border-gray-300 p-1 text-sm edit-unit-price" value="${product ? (product.unit_price || product.unitPrice || product.price || product.unitprice|| '') : ''}" placeholder="Price" step="0.01">
        </td>
        <td class="px-6 py-3 border">
          <input type="number" class="w-full border border-gray-300 p-1 text-sm edit-gst" value="${product ? product.gst || '' : ''}" placeholder="GST %" step="0.01">
        </td>
        <td class="px-6 py-3 border">
          <input type="text" class="w-full border border-gray-300 p-1 text-sm edit-unit" value="${product ? product.unit || '' : ''}" placeholder="Unit">
        </td>
        <td class="px-6 py-3 border">
          <input type="number" class="w-full border border-gray-300 p-1 text-sm edit-discount" value="${product ? product.discount || '' : ''}" placeholder="Discount" step="0.01">
        </td>
        <td class="px-6 py-3 border">
          <input type="number" class="w-full border border-gray-300 p-1 text-sm edit-total" value="${product ? product.total || '' : ''}" placeholder="Total" readonly>
        </td>
        <td class="px-6 py-3 border text-center">
          <button type="button" class="text-red-500 hover:text-red-700 delete-edit-row" title="Delete Row">
            <i class="fas fa-trash"></i>
          </button>
        </td>
      `;

  tbody.appendChild(row);

  calculateEditRowTotal(row);

  // Add event listeners
      row.querySelector('.delete-edit-row').addEventListener('click', function() {
        row.remove();
        updateEditSlNos();
        calculateEditTotal();
      });

      row.querySelectorAll('input').forEach(input => {
        input.addEventListener('input', function() {
          calculateEditRowTotal(row);
          calculateEditTotal();
        });
      });
    }


    function updateEditSlNos() {
      const rows = document.querySelectorAll('#editProductTableBody tr');
      rows.forEach((row, index) => {
        row.cells[0].textContent = index + 1;
      });
    }

    function calculateEditRowTotal(row) {
      const quantity = parseFloat(row.querySelector('.edit-quantity').value) || 0;
      const unitPrice = parseFloat(row.querySelector('.edit-unit-price').value) || 0;
      const gst = parseFloat(row.querySelector('.edit-gst').value) || 0;
      const discount = parseFloat(row.querySelector('.edit-discount').value) || 0;

      //const subtotal = quantity * unitPrice;
      //const gstAmount = subtotal * (gst / 100);
      //const discountAmount = subtotal * (discount / 100);
      //const total = subtotal + gstAmount - discountAmount;

      const subtotal = quantity * unitPrice;           // Base price
    const discountAmount = discount;                 // Direct ‚Çπ discount
    const discountedSubtotal = subtotal - discountAmount;

    const gstAmount = discountedSubtotal * (gst / 100); // GST after discount
    const total = discountedSubtotal + gstAmount;
      

      row.querySelector('.edit-total').value = total.toFixed(2);
    }

    function calculateEditTotal() {
      const rows = document.querySelectorAll('#editProductTableBody tr');
      let grandTotal = 0;

      rows.forEach(row => {
        const total = parseFloat(row.querySelector('.edit-total').value) || 0;
        grandTotal += total;
      });

      document.getElementById('editGrandTotal').textContent = `‚Çπ${grandTotal.toFixed(2)}`;
    }
function addNewProductRow() {
  addEditProductRow(null, null);
  updateEditSlNos();
}

    async function generatePO(orderId) {
      try {
        const order = allOrders.find(o => o.id === orderId);

        const response = await fetch(`${API_URL}/${orderId}/pdf`);

        if (!response.ok) throw new Error('Failed to generate PO PDF');

        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `PO_${order.id}_${order.project}.pdf`;
        document.body.appendChild(a);
        a.click();
        a.remove();
        window.URL.revokeObjectURL(url);

        // Update status to 'sent' and send email
        const sendResponse = await fetch(`${API_URL}/${orderId}/send`, {
          method: 'PUT'
        });

        if (!sendResponse.ok) throw new Error('Failed to update status');

        alert('PO generated successfully! Status updated to Sent and email sent to requester.');
        loadOrders(); // Refresh the orders table

      } catch (error) {
        console.error('Error generating PO:', error);
        alert('Failed to generate PO. Please try again.');
      }
    }

    // Tab switching functionality
    function setupTabs() {
      // Tab switching is already handled by onclick attributes in HTML
    }

    function switchTab(tabName) {
      // Hide all tab contents
      document.getElementById('allOrdersContent').classList.add('hidden');
      document.getElementById('approveOrdersContent').classList.add('hidden');

      // Remove active class from all tabs
      document.getElementById('allOrdersTab').classList.remove('active', 'text-blue-600', 'border-blue-600', 'bg-blue-50');
      document.getElementById('allOrdersTab').classList.add('text-gray-500', 'border-transparent');
      document.getElementById('approveOrdersTab').classList.remove('active', 'text-blue-600', 'border-blue-600', 'bg-blue-50');
      document.getElementById('approveOrdersTab').classList.add('text-gray-500', 'border-transparent');

      // Show selected tab content and activate tab
      if (tabName === 'allOrders') {
        document.getElementById('allOrdersContent').classList.remove('hidden');
        document.getElementById('allOrdersTab').classList.add('active', 'text-blue-600', 'border-blue-600', 'bg-blue-50');
        document.getElementById('allOrdersTab').classList.remove('text-gray-500', 'border-transparent');
      } else if (tabName === 'approveOrders') {
        document.getElementById('approveOrdersContent').classList.remove('hidden');
        document.getElementById('approveOrdersTab').classList.add('active', 'text-blue-600', 'border-blue-600', 'bg-blue-50');
        document.getElementById('approveOrdersTab').classList.remove('text-gray-500', 'border-transparent');
        renderPendingOrdersTable();
      }
    }

    // Render pending orders table for approval
    function renderPendingOrdersTable() {
      const tbody = document.getElementById("pendingOrdersTable");
      tbody.innerHTML = "";

      // Filter orders with status "pending"
      const pendingOrders = allOrders.filter(order => order.status === 'pending');

      if (pendingOrders.length === 0) {
        tbody.innerHTML = '<tr><td colspan="8" class="text-center py-8 text-gray-500">No pending orders for approval.</td></tr>';
        return;
      }

      pendingOrders.forEach(order => {
        const tr = document.createElement("tr");
        tr.className = "hover:bg-gray-50";

        const statusBadgeClass = `status-badge status-${order.status}`;

        tr.innerHTML = `
          <td class="px-2 py-3 font-medium">${order.order_id}</td>
          <td class="px-2 py-3">${order.project}</td>
          <td class="px-2 py-3">${order.supplier}</td>
          <td class="px-2 py-3">${order.requested_by}</td>
          <td class="px-2 py-3">${formatDate(order.date_required)}</td>
          <td class="px-2 py-3 font-semibold">‚Çπ${order.total_amount.toLocaleString()}</td>
          <td class="px-2 py-3">
            <div class="flex items-center gap-2">
              <i class="fas fa-file-pdf text-red-500"></i>
              <span class="text-sm text-gray-600">${order.quotation_file && order.quotation_file.length > 0 ? order.quotation_file.length + ' file' + (order.quotation_file.length > 1 ? 's' : '') : 'No files'}</span>
            </div>
          </td>
          <td class="px-2 py-3">
            <div class="flex gap-2">
              <button onclick="viewQuotations(${order.id})" class="w-20 px-3 py-1 bg-blue-500 text-white rounded text-sm hover:bg-blue-600 transition flex items-center justify-center">
                <i class="fas fa-eye mr-1"></i>View
              </button>
              <button onclick="approveOrder(${order.id})" class="w-24 px-3 py-1 bg-green-600 text-white rounded text-sm hover:bg-green-700 transition flex items-center justify-center">
                <i class="fas fa-check mr-1"></i>Approve
              </button>
            </div>
          </td>
        `;

        tbody.appendChild(tr);
      });
    }
  </script>
</body>
</html>
