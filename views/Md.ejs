<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>MD SECTION - Final Approval</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Poppins', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    body {
        background-color: #f8fafc;
        color: #334155;
        line-height: 1.6;
        max-width: 100%;
    }

    .container {
        display: flex;
        flex-wrap: wrap; /* allows sidebar & content to stack */
        min-height: 100vh;
        width: 100%;
        overflow-x: hidden; /* avoid horizontal scroll */
        margin: 0;
        padding: 0;
    }

    /* Sidebar Styles */
    .sidebar {
        width: 280px;
        background: linear-gradient(180deg, #2c3e50 0%, #34495e 100%);
        color: white;
        padding: 0;
        box-shadow: 0 0 25px rgba(44, 62, 80, 0.2);
        position: relative;
        overflow: hidden;
        z-index: 10;
        flex-shrink: 0;
    }

    .sidebar::before {
        content: '';
        position: absolute;
        top: -50%;
        right: -50%;
        width: 100%;
        height: 200%;
        background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
        z-index: -1;
    }

    .logo {
        padding: 25px 25px 20px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        margin-bottom: 15px;
        display: flex;
        justify-content: center;
        background: rgba(44, 62, 80, 0.3);
    }

    .logo img {
        max-width: 220px;
        height: auto;
        border-radius: 8px;
        
    }

    .menu {
        list-style: none;
        padding: 0 15px;
    }

    .menu-heading {
        padding: 16px 20px 8px;
        font-size: 14px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        color: rgba(255, 255, 255, 0.8);
        margin-top: 15px;
    }

    .menu-item {
        padding: 16px 20px;
        display: flex;
        align-items: center;
        gap: 15px;
        cursor: pointer;
        transition: all 0.3s ease;
        border-radius: 12px;
        margin-bottom: 8px;
        font-weight: 500;
        position: relative;
        overflow: hidden;
    }

    .menu-item::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: all 0.5s ease;
    }

    .menu-item:hover::before {
        left: 100%;
    }

    .menu-item:hover, .menu-item.active {
        background-color: rgba(255, 255, 255, 0.15);
        transform: translateX(5px);
    }

    .menu-item i {
        font-size: 1.2rem;
        width: 24px;
        text-align: center;
    }

    /* Main Content Styles */
    .main-content {
        flex: 1;
        padding: 30px;
        overflow-y: auto;
        background: #f8fafc;
    }

    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 35px;
      padding-bottom: 20px;
      border-bottom: 1px solid #e2e8f0;
    }

    .header h2 {
      font-size: 28px;
      font-weight: 700;
      background: linear-gradient(90deg, #0e1829, #1d4ed8);
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      color: transparent;
    }

    .user-info {
      display: flex;
      align-items: center;
      gap: 12px;
      background: white;
      padding: 8px 16px;
      border-radius: 50px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }

    .user-avatar {
      width: 42px;
      height: 42px;
      border-radius: 50%;
      background: linear-gradient(135deg, #3b82f6, #1d4ed8);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: 600;
      box-shadow: 0 4px 8px rgba(30, 64, 175, 0.3);
    }

    /* Responsive Styles */
    @media (max-width: 992px) {
      .container {
        flex-direction: column;
      }

      .sidebar {
        width: 100%;
        padding: 0;
      }

      .main-content {
        padding: 20px;
      }
    }
    @media (min-width: 1536px) {
        .container {
            max-width: 1850px !important;
        }
    }
    .container::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, #e5e7ef, #764ba2);
    }
    h1 { margin: 0; color: #2c3e50; font-size: 28px; font-weight: 600; }

    table { width: 100%; border-collapse: collapse; font-size: 14px; margin-top: 10px; }
    table th, table td { border: 1px solid #e5e5e5; padding: 10px; text-align: center; }
    table th { background: #2c3e50; color: #fff; font-size: 13px; }

    /* Status Badges */
    .status-badge { padding: 6px 14px; border-radius: 20px; font-size: 12px; font-weight: bold; }
    .status-enquired { background: #ffe58a; color: #7c6f00; }
     .status-pending { background: #fef3c7; color: #d97706; }
    .status-approved { background: #d1fae5; color: #065f46; }
    .status-purchase { background: #dbeafe; color: #1e40af; }
    .status-sent { background: #e0e7ff; color: #3730a3; }
    .status-received { background: #ecfdf5; color: #047857; }
    .status-rejected { background: #fee2e2; color: #b91c1c; }
    .status-inventory_processed { background: #ccfbf1; color: #0f766e; }
    .status-paid { background: #e9d5ff; color: #7c3aed; }


    /* Summary Cards */
    .summary-cards {
      display: flex;
      justify-content: space-between;
      gap: 20px;
      margin-bottom: 25px;
      flex-wrap: wrap;
    }
    .card {
      flex: 1;
      min-width: 200px;
      background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
      color: #2c3e50;
      padding: 20px;
      border-radius: 12px;
      text-align: center;
      box-shadow: 0 4px 15px rgba(0,0,0,0.1);
      border: 1px solid #e9ecef;
      transition: all 0.3s ease;
    }
    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 25px rgba(0,0,0,0.15);
      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    }
    .card i { font-size: 32px; margin-bottom: 10px; opacity: 0.9; }
    .card h3 { margin: 0; font-size: 28px; font-weight: 700; }
    .card p { margin: 5px 0 0 0; font-size: 14px; opacity: 0.9; }

    /* Action Buttons */
    .actions { display: flex; justify-content: center; gap: 5px; flex-wrap: wrap; }
    .actions button {
      padding: 4px 8px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 11px;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 4px;
      transition: all 0.2s ease;
      min-width: auto;
      white-space: nowrap;
    }
    .actions button:hover { transform: translateY(-1px); box-shadow: 0 2px 4px rgba(0,0,0,0.15); }
    .approve { background: #2ecc71; color: #fff; }
    .reject { background: #e74c3c; color: #fff; }

    .view { background: #3498db; color: #fff; }

    /* Modal styles */
    .modal { display: none; position: fixed; z-index: 1000; padding-top: 30px; left: 0; top: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.7); }
    .modal-content { background: #fff; margin: auto; padding: 20px; border-radius: 10px; width: 85%; height: 85%; display: flex; flex-direction: column; }
    .modal-header { margin-bottom: 10px; }
    .modal-header h2 { margin: 0; color: #2c3e50; }
    .close { float: right; color: #e74c3c; font-size: 28px; cursor: pointer; font-weight: bold; }
    iframe { flex: 1; border: none; width: 100%; }
    .details { font-size: 13px; margin-top: 5px; padding: 10px; background: #f9f9f9; border-radius: 6px; line-height: 1.5; border: 1px solid #eee; }

    /* Tabs */
    .tabs { margin-bottom: 20px; }
    .tab-button {
      padding: 10px 20px;
      border: none;
      background: #ecf0f1;
      color: #2c3e50;
      cursor: pointer;
      font-size: 14px;
      font-weight: 600;
      border-radius: 8px 8px 0 0;
      transition: all 0.2s ease;
    }
    .tab-button.active {
      background: #2c3e50;
      color: #fff;
    }
    .tab-button:hover { background: #bdc3c7; }

    /* Filters */
    .filters { margin-bottom: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6; }
    .filter-row { display: flex; gap: 10px; align-items: center; flex-wrap: wrap; }
    .filter-row input, .filter-row select {
      padding: 8px 12px;
      border: 1px solid #ced4da;
      border-radius: 6px;
      font-size: 14px;
    }
    .filter-row button {
      padding: 8px 16px;
      background: #6c757d;
      color: #fff;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
    }
    .filter-row button:hover { background: #5a6268; }

    /* Tab Content */
    .tab-content { display: none; }
    .tab-content.active { display: block; }

    /* Pagination */
    .pagination {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin-top: 20px;
      flex-wrap: wrap;
    }
    .pagination button {
      padding: 8px 12px;
      border: 1px solid #dee2e6;
      background: #fff;
      color: #007bff;
      cursor: pointer;
      border-radius: 4px;
      font-size: 14px;
    }
    .pagination button:hover { background: #e9ecef; }
    .pagination button.active { background: #007bff; color: #fff; }
    .pagination button:disabled { background: #6c757d; color: #fff; cursor: not-allowed; }

    /* Sortable headers */
    table th { cursor: pointer; user-select: none; }
    table th:hover { background: #34495e; }
  </style>
</head>
<body>
  <div class="container">
    <!-- Sidebar -->
    <div class="sidebar">
      <div class="logo">
        <img src="images/page_logo.jpg" alt="Company Logo">
      </div>
      <ul class="menu">
        <li class="menu-heading">Purchase Orders</li>
        <li class="menu-item active" data-tab="pending"><i class="fas fa-clock"></i> Pending Approvals</li>
        <li class="menu-item" data-tab="all"><i class="fas fa-list"></i> All Orders</li>
        <li class="menu-item" data-tab="rejected"><i class="fas fa-times"></i> Rejected Orders</li>
        <li class="menu-item" data-tab="quotations"><i class="fas fa-file-alt"></i> All Quotations</li>
        <li class="menu-heading">QUOTATION</li>
        <li class="menu-item" data-tab="approve"><i class="fas fa-check"></i> Approve Quotation</li>

        <li><a href="/vk" style="display: flex; align-items: center; gap: 15px; cursor: pointer; padding: 16px 20px; transition: all 0.3s ease; border-radius: 12px; margin-bottom: 8px; font-weight: 500; position: relative; overflow: hidden; color: white; text-decoration: none;"><i class="fas fa-plus"></i> New VK_QUOTATION</a></li>
        <li class="menu-item logout">
          <form action="/logout" method="POST">
            <button type="submit"><i class="fas fa-sign-out-alt"></i> Logout</button>
          </form>
        </li>
      </ul>
    </div>

    <!-- Main Content -->
    <div class="main-content">
      <div class="header">
        <h2>Purchase Orders (Final Approval)</h2>
        <div class="user-info">
          <div class="user-avatar">MD</div>
          <span id="username">MD (Admin)</span>
        </div>
      </div>

    <!-- Summary Cards -->
    <div class="summary-cards" id="summaryCards">
      <div class="card">
        <i class="fas fa-clock"></i>
        <div class="card-content">
          <h3 id="pendingCount">0</h3>
          <p>Pending Approvals</p>
        </div>
      </div>
      <div class="card">
        <i class="fas fa-check-circle"></i>
        <div class="card-content">
          <h3 id="approvedCount">0</h3>
          <p>Approved Orders</p>
        </div>
      </div>
      <div class="card">
        <i class="fas fa-times-circle"></i>
        <div class="card-content">
          <h3 id="rejectedCount">0</h3>
          <p>Rejected Orders</p>
        </div>
      </div>
      <div class="card">
        <i class="fas fa-file-alt"></i>
        <div class="card-content">
          <h3 id="totalCount">0</h3>
          <p>Total Orders</p>
        </div>
      </div>
    </div>

    <!-- Tabs -->
    <div class="tabs">
      <button class="tab-button active" onclick="switchTab('pending')">Pending Approvals</button>
      <button class="tab-button" onclick="switchTab('all')">All Orders</button>
      <button class="tab-button" onclick="switchTab('rejected')">Rejected Orders</button>
      <button class="tab-button" onclick="switchTab('quotations')">All Quotations</button>
      <button class="tab-button" onclick="switchTab('approve')">Approve Quotation</button>
    </div>

    <!-- All Orders Table -->
    <div id="allTab" class="tab-content">
      <table id="allOrdersTable">
        <thead>
          <tr>
            <th onclick="sortTable('id')">ID <i class="fas fa-sort"></i></th>
            <th onclick="sortTable('purchase_order_number')">Order ID <i class="fas fa-sort"></i></th>
            <th onclick="sortTable('project_name')">Project <i class="fas fa-sort"></i></th>
            <th>Department</th>
            <th onclick="sortTable('supplier_name')">Supplier <i class="fas fa-sort"></i></th>
            <th>Description</th>
            <th>Requested By</th>
            <th onclick="sortTable('date_required')">Date Required <i class="fas fa-sort"></i></th>
            <th onclick="sortTable('total_amount')">Total Amount <i class="fas fa-sort"></i></th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="allOrdersBody"></tbody>
      </table>
    </div>

    <!-- Search and Filter Section -->
    <div class="filters" id="filtersSection">
      <div class="filter-row">
        <input type="text" id="searchInput" placeholder="Search by Order ID, Project, Supplier..." onkeyup="applyFilters()">
        <select id="supplierFilter" onchange="applyFilters()">
          <option value="All Suppliers">All Suppliers</option>
        </select>
        <select id="statusFilter" onchange="applyFilters()">
          <option value="All Statuses">All Statuses</option>
          <option value="enquired">Enquired</option>
          <option value="purchase">Purchase Requested</option>
          <option value="approved">Approved</option>
          <option value="rejected">Rejected</option>
        </select>
        <input type="date" id="dateFrom" onchange="applyFilters()">
        <input type="date" id="dateTo" onchange="applyFilters()">
        <button onclick="clearFilters()">Clear Filters</button>
      </div>
    </div>

    <!-- Pending Approvals Table -->
    <div id="pendingTab" class="tab-content">
      <table id="pendingTable">
        <thead>
          <tr>
            <th onclick="sortTable('id')">ID <i class="fas fa-sort"></i></th>
            <th onclick="sortTable('purchase_order_number')">Order ID <i class="fas fa-sort"></i></th>
            <th onclick="sortTable('project_name')">Project <i class="fas fa-sort"></i></th>
            <th>Department</th>
            <th onclick="sortTable('supplier_name')">Supplier <i class="fas fa-sort"></i></th>
            <th>Description</th>
            <th>Requested By</th>
            <th onclick="sortTable('date_required')">Date Required <i class="fas fa-sort"></i></th>
            <th onclick="sortTable('total_amount')">Total Amount <i class="fas fa-sort"></i></th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="purchaseOrdersBody"></tbody>
      </table>
    </div>


    <!-- All Quotations Table -->
    <div id="quotationsTab" class="tab-content">
      <table id="quotationsTable">
        <thead>
          <tr>
            <th onclick="sortTable('id')">ID <i class="fas fa-sort"></i></th>
            <th onclick="sortTable('purchase_order_number')">Order ID <i class="fas fa-sort"></i></th>
            <th onclick="sortTable('project_name')">Project <i class="fas fa-sort"></i></th>
            <th onclick="sortTable('supplier_name')">Supplier <i class="fas fa-sort"></i></th>
            <th>Requested By</th>
            <th onclick="sortTable('date_required')">Date Required <i class="fas fa-sort"></i></th>
            <th onclick="sortTable('total_amount')">Total Amount <i class="fas fa-sort"></i></th>
            <th>Status</th>
            <th>Uploaded Date</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="quotationsBody"></tbody>
      </table>
      <!-- Pagination -->
      <div class="pagination" id="pagination"></div>
    </div>

    <!-- Approve Quotation Table -->
    <div id="approveTab" class="tab-content">
      <table id="approveTable">
        <thead>
          <tr>
            <th onclick="sortTable('id')">ID <i class="fas fa-sort"></i></th>
            <th onclick="sortTable('purchase_order_number')">Order ID <i class="fas fa-sort"></i></th>
            <th onclick="sortTable('project_name')">Project <i class="fas fa-sort"></i></th>
            <th onclick="sortTable('supplier_name')">Supplier <i class="fas fa-sort"></i></th>
            <th>Quotation Raiser</th>
            <th onclick="sortTable('date_required')">Date <i class="fas fa-sort"></i></th>
            <th onclick="sortTable('total_amount')">Total Amount <i class="fas fa-sort"></i></th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="approveBody"></tbody>
      </table>
      <!-- Pagination -->
      <div class="pagination" id="approvePagination"></div>
    </div>
  </div>

  <!-- Modal for PDF preview -->
  <div id="pdfModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeModal()">&times;</span>
      <div class="modal-header">
        <h2>Quotation Preview</h2>
        <div class="details" id="orderDetails"></div>
      </div>
      <iframe id="pdfFrame"></iframe>
    </div>
  </div>

  <!-- Edit Order Modal -->
  <div id="editModal" class="hidden fixed inset-0 bg-transparent flex items-center justify-center z-50">
    <div class="bg-white rounded-lg shadow-xl w-20/22 max-w-7xl p-6 max-h-[98vh] overflow-y-auto">
      <div class="flex justify-between items-center border-b pb-4 mb-6">
        <h2 class="text-xl font-semibold text-gray-800">✏️ Edit Order Details</h2>
        <button onclick="closeEdit()" class="text-red-500 hover:text-red-700 text-2xl font-bold">&times;</button>
      </div>

      <div id="dateRequiredDisplay" class="absolute top-4 right-4 bg-red-500 text-white px-4 py-2 rounded blink">
        Date Required: <span id="dateRequiredValue"></span>
      </div>

      <form id="editOrderForm" class="space-y-4">
        <div class="bg-gray-50 p-4 rounded-lg border">
          <h3 class="text-lg font-semibold text-gray-800 mb-2" id="editProjectName">Project Name</h3>
          <p class="text-sm text-gray-600" id="editProjectCode">Project Code</p>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Supplier Name *</label>
            <input type="text" id="editSupplierName" class="w-full border border-gray-300 p-2 rounded focus:ring-2 focus:ring-blue-500" required>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Supplier GST *</label>
            <input type="text" id="editSupplierGst" class="w-full border border-gray-300 p-2 rounded focus:ring-2 focus:ring-blue-500" required>
          </div>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Supplier Address *</label>
          <textarea id="editSupplierAddress" rows="3" class="w-full border border-gray-300 p-2 rounded focus:ring-2 focus:ring-blue-500" required></textarea>
        </div>

        <div class="flex items-center gap-2">
          <input type="checkbox" id="editSingleSupplier" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500">
          <label for="editSingleSupplier" class="text-sm font-medium text-gray-700">Single Supplier</label>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Product Details</label>
          <table class="product-table min-w-full text-sm text-left border border-gray-300 rounded" id="editProductTable">
            <thead class="bg-gray-200 text-gray-600 uppercase text-xs">
              <tr>
                <th class="px-6 py-3 border">SL No</th>
                <th class="px-6 py-3 border">Part No</th>
                <th class="px-6 py-3 border">Description</th>
                <th class="px-6 py-3 border">HSN Code</th>
                <th class="px-6 py-3 border">Quantity</th>
                <th class="px-6 py-3 border">Unit Price (₹)</th>
                <th class="px-6 py-3 border">GST %</th>
                <th class="px-6 py-3 border">Unit</th>
                <th class="px-6 py-3 border">Discount</th>
                <th class="px-6 py-3 border">Total (₹)</th>
                <th class="px-6 py-3 border">Actions</th>
              </tr>
            </thead>
            <tbody id="editProductTableBody">
              <!-- Rows will be dynamically populated -->
            </tbody>
            <tfoot id="editProductTableFooter" class="bg-gray-100">
              <tr>
                <td colspan="10" class="px-4 py-2 border font-semibold text-right">Grand Total:</td>
                <td class="px-4 py-2 border font-bold text-lg" id="editGrandTotal">₹0.00</td>
              </tr>
            </tfoot>
          </table>
        </div>

        <!-- Notes Display -->
        <div class="mt-6 p-4 border border-gray-300 rounded bg-gray-50">
          <label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
          <div id="editNotesDisplay" class="whitespace-pre-wrap text-gray-700 bg-white p-3 rounded border border-gray-300 min-h-[80px]"></div>
        </div>

        <!-- Upload New Quotation -->
        <div class="border-t pt-4">
          <h3 class="text-lg font-medium text-gray-800 mb-3">📎 Upload New Quotation</h3>
          <input type="file" id="newQuotationFile" class="w-full border border-gray-300 p-2 rounded focus:ring-2 focus:ring-blue-500" accept="application/pdf" multiple>
          <p class="text-sm text-gray-500 mt-1">Select multiple PDF files to upload new quotations</p>
        </div>

        <div class="flex justify-end gap-3 pt-4 border-t">
          <button type="button" onclick="closeEdit()" class="px-4 py-2 bg-gray-400 rounded text-white hover:bg-gray-500">Cancel</button>
          <button type="submit" class="px-6 py-2 bg-blue-600 rounded text-white hover:bg-blue-700">
            <i class="fas fa-save mr-2"></i>Save Changes
          </button>
        </div>
      </form>
    </div>
  </div>

  <script>
    let currentTab = 'pending';
    let currentPage = 1;
    let currentSortBy = 'created_at';
    let currentSortOrder = 'DESC';
    let suppliers = [];
    const API_URL = '/api/orders';
    let currentEditId = null;

    // Initialize
    document.addEventListener("DOMContentLoaded", function() {
      loadSuppliers();
      loadSummaryCounts();
      switchTab('pending');

      // Add event listeners for sidebar menu items
      document.querySelectorAll('.menu-item').forEach(item => {
        item.addEventListener('click', function() {
          if (!this.classList.contains('logout')) {
            switchTab(this.dataset.tab);
          }
        });
      });
    });

    // Load suppliers for filter dropdown
    async function loadSuppliers() {
      try {
        const res = await fetch('/api/orders');
        const orders = await res.json();
        const uniqueSuppliers = [...new Set(orders.map(o => o.supplier))].filter(s => s);
        suppliers = uniqueSuppliers;

        const supplierFilter = document.getElementById('supplierFilter');
        supplierFilter.innerHTML = '<option value="All Suppliers">All Suppliers</option>';
        suppliers.forEach(supplier => {
          supplierFilter.innerHTML += `<option value="${supplier}">${supplier}</option>`;
        });
      } catch (err) {
        console.error('Failed to load suppliers:', err);
      }
    }

    // Load summary counts for dashboard cards
    async function loadSummaryCounts() {
      try {
        const res = await fetch('/api/orders');
        const orders = await res.json();

        // Count orders by status
        // Adjusted to match backend status values
        const pendingCount = orders.filter(order => order.status === 'purchase' || order.status === 'pending').length;
        const approvedCount = orders.filter(order => order.status === 'approved').length;
        const rejectedCount = orders.filter(order => order.status === 'rejected').length;
        // Remove othersCount since rejectedCount is shown separately now
        const totalCount = orders.length;

        // Update the summary cards
        document.getElementById('pendingCount').textContent = pendingCount;
        document.getElementById('approvedCount').textContent = approvedCount;
        document.getElementById('rejectedCount').textContent = rejectedCount;
        document.getElementById('totalCount').textContent = totalCount;
      } catch (err) {
        console.error('Failed to load summary counts:', err);
      }
    }

    // Tab switching
    function switchTab(tab) {
      currentTab = tab;
      currentPage = 1;

      // Update tab buttons
      document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
      document.querySelector(`[onclick="switchTab('${tab}')"]`).classList.add('active');

      // Show/hide content
      document.getElementById('pendingTab').style.display = tab === 'pending' ? 'block' : 'none';
      document.getElementById('allTab').style.display = tab === 'all' ? 'block' : 'none';
      document.getElementById('quotationsTab').style.display = tab === 'quotations' ? 'block' : 'none';
      document.getElementById('approveTab').style.display = tab === 'approve' ? 'block' : 'none';
      // Add rejectedTab div for rejected orders
      let rejectedTab = document.getElementById('rejectedTab');
      if (!rejectedTab) {
        rejectedTab = document.createElement('div');
        rejectedTab.id = 'rejectedTab';
        rejectedTab.className = 'tab-content';
        rejectedTab.innerHTML = `
          <table id="rejectedOrdersTable" style="width: calc(100% + 60px); margin-left: -30px;">
            <thead>
              <tr>
                <th onclick="sortTable('id')">ID <i class="fas fa-sort"></i></th>
                <th onclick="sortTable('purchase_order_number')">Order ID <i class="fas fa-sort"></i></th>
                <th onclick="sortTable('project_name')">Project <i class="fas fa-sort"></i></th>
                <th>Department</th>
                <th onclick="sortTable('supplier_name')">Supplier <i class="fas fa-sort"></i></th>
                <th>Description</th>
                <th>Requested By</th>
                <th onclick="sortTable('date_required')">Date Required <i class="fas fa-sort"></i></th>
                <th onclick="sortTable('total_amount')">Total Amount <i class="fas fa-sort"></i></th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="rejectedOrdersBody"></tbody>
          </table>
        `;
        document.querySelector('.main-content').appendChild(rejectedTab);
      }
      document.getElementById('rejectedTab').style.display = tab === 'rejected' ? 'block' : 'none';

      // Load data
      if (tab === 'pending') {
        loadPurchaseOrders();
      } else if (tab === 'all') {
        loadAllOrders();
      } else if (tab === 'rejected') {
        loadRejectedOrders();
      } else if (tab === 'approve') {
        loadApproveQuotations();
      } else {
        loadAllQuotations();
      }
    }

    // Load pending orders
    async function loadPurchaseOrders() {
      try {
        const res = await fetch('/api/orders');
        const allOrders = await res.json();
        let orders = allOrders.filter(order => order.status === 'purchase' || order.status === 'enquired');

        // Apply search filter
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        if (searchTerm) {
          orders = orders.filter(order =>
            (order.purchase_order_number || order.order_id || '').toLowerCase().includes(searchTerm) ||
            (order.project_name || order.project || '').toLowerCase().includes(searchTerm) ||
            (order.supplier_name || order.supplier || '').toLowerCase().includes(searchTerm)
          );
        }

        // Apply supplier filter
        const supplierFilter = document.getElementById('supplierFilter').value;
        if (supplierFilter !== 'All Suppliers') {
          orders = orders.filter(order => order.supplier_name === supplierFilter || order.supplier === supplierFilter);
        }

        // Apply status filter
        const statusFilter = document.getElementById('statusFilter').value;
        if (statusFilter !== 'All Statuses') {
          orders = orders.filter(order => order.status === statusFilter.toLowerCase());
        }

        // Apply date filters
        const dateFrom = document.getElementById('dateFrom').value;
        const dateTo = document.getElementById('dateTo').value;
        if (dateFrom) {
          orders = orders.filter(order => new Date(order.date_required) >= new Date(dateFrom));
        }
        if (dateTo) {
          orders = orders.filter(order => new Date(order.date_required) <= new Date(dateTo));
        }

        renderOrders(orders, 'purchaseOrdersBody');
      } catch (err) {
        console.error('Failed to load purchase orders:', err);
        document.getElementById('purchaseOrdersBody').innerHTML = '<tr><td colspan="11">Failed to load purchase orders</td></tr>';
      }
    }

    // Load rejected orders
    async function loadRejectedOrders() {
      try {
        const res = await fetch('/api/orders');
        const allOrders = await res.json();
        let orders = allOrders.filter(order => order.status === 'rejected');

        // Apply search filter
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        if (searchTerm) {
          orders = orders.filter(order =>
            (order.purchase_order_number || order.order_id || '').toLowerCase().includes(searchTerm) ||
            (order.project_name || order.project || '').toLowerCase().includes(searchTerm) ||
            (order.supplier_name || order.supplier || '').toLowerCase().includes(searchTerm)
          );
        }

        // Apply supplier filter
        const supplierFilter = document.getElementById('supplierFilter').value;
        if (supplierFilter !== 'All Suppliers') {
          orders = orders.filter(order => order.supplier_name === supplierFilter || order.supplier === supplierFilter);
        }

        // Apply status filter
        const statusFilter = document.getElementById('statusFilter').value;
        if (statusFilter !== 'All Statuses') {
          orders = orders.filter(order => order.status === statusFilter.toLowerCase());
        }

        // Apply date filters
        const dateFrom = document.getElementById('dateFrom').value;
        const dateTo = document.getElementById('dateTo').value;
        if (dateFrom) {
          orders = orders.filter(order => new Date(order.date_required) >= new Date(dateFrom));
        }
        if (dateTo) {
          orders = orders.filter(order => new Date(order.date_required) <= new Date(dateTo));
        }

        renderOrders(orders, 'rejectedOrdersBody');
      } catch (err) {
        console.error('Failed to load rejected orders:', err);
        document.getElementById('rejectedOrdersBody').innerHTML = '<tr><td colspan="11">Failed to load rejected orders</td></tr>';
      }
    }

    // Load all orders
    async function loadAllOrders() {
      try {
        const res = await fetch('/api/orders');
        const allOrders = await res.json();
        let orders = allOrders;

        // Apply search filter
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        if (searchTerm) {
          orders = orders.filter(order =>
            (order.purchase_order_number || order.order_id || '').toLowerCase().includes(searchTerm) ||
            (order.project_name || order.project || '').toLowerCase().includes(searchTerm) ||
            (order.supplier_name || order.supplier || '').toLowerCase().includes(searchTerm)
          );
        }

        // Apply supplier filter
        const supplierFilter = document.getElementById('supplierFilter').value;
        if (supplierFilter !== 'All Suppliers') {
          orders = orders.filter(order => order.supplier_name === supplierFilter || order.supplier === supplierFilter);
        }

        // Apply status filter
        const statusFilter = document.getElementById('statusFilter').value;
        if (statusFilter !== 'All Statuses') {
          orders = orders.filter(order => order.status === statusFilter.toLowerCase());
        }

        // Apply date filters
        const dateFrom = document.getElementById('dateFrom').value;
        const dateTo = document.getElementById('dateTo').value;
        if (dateFrom) {
          orders = orders.filter(order => new Date(order.date_required) >= new Date(dateFrom));
        }
        if (dateTo) {
          orders = orders.filter(order => new Date(order.date_required) <= new Date(dateTo));
        }

        renderOrders(orders, 'allOrdersBody');
      } catch (err) {
        console.error('Failed to load all orders:', err);
        document.getElementById('allOrdersBody').innerHTML = '<tr><td colspan="11">Failed to load orders</td></tr>';
      }
    }

    // Load all quotations with filters
    async function loadAllQuotations() {
      try {
        // Use the working /api/orders endpoint and filter for orders with quotations
        const res = await fetch('/api/orders');
        const allOrders = await res.json();

        // Filter orders that have quotation files
        let quotations = allOrders.filter(order =>
          order.quotation_file &&
          Array.isArray(order.quotation_file) &&
          order.quotation_file.length > 0
        );

        // Apply search filter
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        if (searchTerm) {
          quotations = quotations.filter(order =>
            order.order_id.toLowerCase().includes(searchTerm) ||
            order.project.toLowerCase().includes(searchTerm) ||
            order.supplier.toLowerCase().includes(searchTerm)
          );
        }

        // Apply supplier filter
        const supplierFilter = document.getElementById('supplierFilter').value;
        if (supplierFilter !== 'All Suppliers') {
          quotations = quotations.filter(order => order.supplier === supplierFilter);
        }

        // Apply status filter
        const statusFilter = document.getElementById('statusFilter').value;
        if (statusFilter !== 'All Statuses') {
          quotations = quotations.filter(order => order.status === statusFilter.toLowerCase());
        }

        // Apply date filters
        const dateFrom = document.getElementById('dateFrom').value;
        const dateTo = document.getElementById('dateTo').value;
        if (dateFrom) {
          quotations = quotations.filter(order =>
            new Date(order.date_required) >= new Date(dateFrom)
          );
        }
        if (dateTo) {
          quotations = quotations.filter(order =>
            new Date(order.date_required) <= new Date(dateTo)
          );
        }

        // Sort quotations
        quotations.sort((a, b) => {
          let aVal = a[currentSortBy];
          let bVal = b[currentSortBy];

          if (currentSortBy === 'date_required' || currentSortBy === 'created_at') {
            aVal = new Date(aVal);
            bVal = new Date(bVal);
          } else if (currentSortBy === 'total_amount') {
            aVal = parseFloat(aVal) || 0;
            bVal = parseFloat(bVal) || 0;
          }

          if (currentSortOrder === 'ASC') {
            return aVal > bVal ? 1 : -1;
          } else {
            return aVal < bVal ? 1 : -1;
          }
        });

        // Simple pagination (client-side)
        const totalItems = quotations.length;
        const totalPages = Math.ceil(totalItems / 10);
        const startIndex = (currentPage - 1) * 10;
        const endIndex = startIndex + 10;
        const paginatedQuotations = quotations.slice(startIndex, endIndex);

        renderQuotations(paginatedQuotations, 'quotationsBody');

        // Render pagination
        const paginationDiv = document.getElementById('pagination');
        paginationDiv.innerHTML = '';

        if (totalPages > 1) {
          // Previous button
          paginationDiv.innerHTML += `<button onclick="changePage(${currentPage - 1})" ${currentPage === 1 ? 'disabled' : ''}>Previous</button>`;

          // Page numbers
          for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) {
            paginationDiv.innerHTML += `<button onclick="changePage(${i})" class="${i === currentPage ? 'active' : ''}">${i}</button>`;
          }

          // Next button
          paginationDiv.innerHTML += `<button onclick="changePage(${currentPage + 1})" ${currentPage === totalPages ? 'disabled' : ''}>Next</button>`;
        }
      } catch (err) {
        console.error('Failed to load quotations:', err);
        document.getElementById('quotationsBody').innerHTML = '<tr><td colspan="10">Failed to load quotations</td></tr>';
      }
    }

    // View all quotations for an order
    async function viewAllQuotations(orderId) {
      try {
        const res = await fetch(`/api/orders/${orderId}`);
        if (!res.ok) throw new Error("Failed to fetch order details");
        const order = await res.json();

        if (!order.quotation_file || order.quotation_file.length === 0) {
          alert("No quotations available for this order.");
          return;
        }

        // Show modal with list of quotations
        let modalContent = '<h3>Quotations for Order: ' + order.purchase_order_number + '</h3><ul>';
        order.quotation_file.forEach(file => {
          modalContent += `<li><a href="/uploads/${file}" target="_blank">${file}</a></li>`;
        });
        modalContent += '</ul>';

        const modal = document.getElementById("pdfModal");
        document.getElementById("orderDetails").innerHTML = modalContent;
        document.getElementById("pdfFrame").src = "";
        modal.style.display = "block";
      } catch (err) {
        alert(err.message);
      }
    }

    // Render orders table
    function renderOrders(orders, tbodyId) {
      const tbody = document.getElementById(tbodyId);
      tbody.innerHTML = "";

      orders.forEach(order => {
        const row = `
          <tr>
            <td>${order.id}</td>
            <td>${order.purchase_order_number || order.order_id}</td>
            <td>${order.project_name || order.project}</td>
            <td>${order.department || 'Design and Development'}</td>
            <td>${order.supplier_name || order.supplier}</td>
            <td>${order.urgency || order.description || "-"}</td>
            <td>${order.ordered_by || order.requested_by}</td>
            <td>${new Date(order.date_required).toLocaleDateString()}</td>
            <td>₹${order.total_amount ? order.total_amount.toLocaleString() : '0.00'}</td>
            <td><span class="status-badge status-${order.status}">${order.status}</span></td>
            <td class="actions">
              <button class="view" onclick='viewQuotation(${JSON.stringify(order)})'>
                <i class="fas fa-file-pdf"></i> Preview
              </button>
              <button class="view" onclick="editOrder(${order.id})">
                <i class="fas fa-edit"></i> Edit
              </button>
              <button class="approve" onclick="updateStatus(${order.id}, 'approved')">
                <i class="fas fa-check"></i> Approve
              </button>
              <button class="reject" onclick="updateStatus(${order.id}, 'rejected')">
                <i class="fas fa-times"></i> Reject
              </button>
              ${order.status === 'approved' || order.status === 'sent' || order.status === 'received'
                ? `<button class="view" onclick="generatePO(${order.id})">
                     <i class="fas fa-file-alt"></i> Generate PO
                   </button>`
                : `<button class="view" onclick="generatePO(${order.id})" disabled style="opacity: 0.5; cursor: not-allowed;">
                     <i class="fas fa-file-alt"></i> Generate PO
                   </button>`}
            </td>
          </tr>
        `;
        tbody.insertAdjacentHTML("beforeend", row);
      });
    }

    // Render quotations table
    function renderQuotations(quotations, tbodyId) {
      const tbody = document.getElementById(tbodyId);
      tbody.innerHTML = "";

        quotations.forEach(quotation => {
        const row = `
          <tr>
            <td>${quotation.id}</td>
            <td>${quotation.order_id || quotation.purchase_order_number}</td>
            <td>${quotation.project || quotation.project_name}</td>
            <td>${quotation.supplier || quotation.supplier_name}</td>
            <td>${quotation.requested_by || quotation.ordered_by}</td>
            <td>${new Date(quotation.date_required).toLocaleDateString()}</td>
            <td>₹${quotation.total_amount ? quotation.total_amount.toLocaleString() : '0.00'}</td>
            <td><span class="status-badge status-${quotation.status}">${quotation.status}</span></td>
            <td>${new Date(quotation.created_at).toLocaleDateString()}</td>
            <td class="actions">
              <button class="view" onclick='viewQuotation(${JSON.stringify(quotation)})'>
                <i class="fas fa-file-pdf"></i> Preview
              </button>
              <button class="view" onclick="viewAllQuotations(${quotation.id})">
                <i class="fas fa-list"></i> View All Quotations
              </button>
              <button class="view" onclick="generatePO(${quotation.id})">
                <i class="fas fa-file-alt"></i> Generate PO
              </button>
            </td>
          </tr>
        `;
        tbody.insertAdjacentHTML("beforeend", row);
      });
    }

    // Render pagination
    function renderPagination(pagination) {
      const paginationDiv = document.getElementById('pagination');
      paginationDiv.innerHTML = '';

      if (pagination.pages <= 1) return;

      // Previous button
      paginationDiv.innerHTML += `<button onclick="changePage(${pagination.page - 1})" ${pagination.page === 1 ? 'disabled' : ''}>Previous</button>`;

      // Page numbers
      for (let i = Math.max(1, pagination.page - 2); i <= Math.min(pagination.pages, pagination.page + 2); i++) {
        paginationDiv.innerHTML += `<button onclick="changePage(${i})" class="${i === pagination.page ? 'active' : ''}">${i}</button>`;
      }

      // Next button
      paginationDiv.innerHTML += `<button onclick="changePage(${pagination.page + 1})" ${pagination.page === pagination.pages ? 'disabled' : ''}>Next</button>`;
    }

    // Change page
    function changePage(page) {
      currentPage = page;
      loadAllQuotations();
    }

    // Apply filters
    function applyFilters() {
      if (currentTab === 'pending') {
        loadPurchaseOrders();
      } else if (currentTab === 'all') {
        loadAllOrders();
      } else if (currentTab === 'quotations') {
        loadAllQuotations();
      } else if (currentTab === 'rejected') {
        loadRejectedOrders();
      }
    }

    // Clear filters
    function clearFilters() {
      document.getElementById('searchInput').value = '';
      document.getElementById('supplierFilter').value = 'All Suppliers';
      document.getElementById('statusFilter').value = 'All Statuses';
      document.getElementById('dateFrom').value = '';
      document.getElementById('dateTo').value = '';
      applyFilters();
    }

    // Sort table
    function sortTable(column) {
      if (currentSortBy === column) {
        currentSortOrder = currentSortOrder === 'ASC' ? 'DESC' : 'ASC';
      } else {
        currentSortBy = column;
        currentSortOrder = 'ASC';
      }

      if (currentTab === 'quotations') {
        loadAllQuotations();
      } else if (currentTab === 'all') {
        loadAllOrders();
      } else {
        // For pending orders, we could implement client-side sorting
        // For now, just reload
        loadPurchaseOrders();
      }
    }

    // View quotation
    function viewQuotation(order) {
      if (!order.quotation_file || order.quotation_file.length === 0) {
        alert("No quotation uploaded ❌");
        return;
      }
      // Show the most recent quotation file (assuming last in array is most recent)
      const recentFile = Array.isArray(order.quotation_file) ? order.quotation_file[order.quotation_file.length - 1] : order.quotation_file;
      document.getElementById("pdfFrame").src = `/uploads/${recentFile}`;
      document.getElementById("orderDetails").innerHTML = `
        <strong>Project:</strong> ${order.project_name || order.project} &nbsp; |
        <strong>Supplier:</strong> ${order.supplier_name || order.supplier} &nbsp; |
        <strong>Requested By:</strong> ${order.ordered_by || order.requested_by} &nbsp; |
        <strong>Date Required:</strong> ${new Date(order.date_required).toLocaleDateString()} &nbsp; |
        <strong>Total:</strong> ₹${order.total_amount.toLocaleString()}
      `;
      document.getElementById("pdfModal").style.display = "block";
    }

    // Close modal
    function closeModal() {
      document.getElementById("pdfModal").style.display = "none";
      document.getElementById("pdfFrame").src = "";
    }

    // Update status
    async function updateStatus(id, status) {
  console.log(`🔄 Frontend: Function called with id=${id}, status=${status}`);

  try {
    console.log(`🔄 Frontend: Sending request to /api/orders/${id}/status`);
    const res = await fetch(`/api/orders/${id}/status`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ status })
    });

    console.log(`🔄 Frontend: Response received, status: ${res.status}`);

    if (res.ok) {
      const data = await res.json();
      console.log(`✅ Frontend: Update successful`, data);

      alert(`✅ Order ${id} ${status} successfully!`);
      loadSummaryCounts();

      // 🔥 Handle tab reloads properly
      if (status === "rejected") {
        // Refresh rejected tab so the order moves there
        loadRejectedOrders();

        // Also refresh pending so it disappears
        if (currentTab === "pending") {
          loadPurchaseOrders();
        }
      } else if (status === "approved") {
        if (currentTab === "pending") loadPurchaseOrders();
        else if (currentTab === "all") loadAllOrders();
      } else {
        if (currentTab === "all") loadAllOrders();
        else if (currentTab === "quotations") loadAllQuotations();
      }
    } else {
      const err = await res.json();
      console.log(`❌ Frontend: Update failed`, err);
      alert(`❌ Failed: ${err.error || 'Unknown error'}`);
    }
  } catch (error) {
    console.error(`❌ Frontend: Network error`, error);
    alert(`❌ Network error: ${error.message}`);
  }
}

// Edit order function
async function editOrder(orderId) {
  currentEditId = orderId;

  try {
    // Fetch order details
    const orderResponse = await fetch(`${API_URL}/${orderId}`);
    if (!orderResponse.ok) throw new Error('Failed to fetch order details');
    const order = await orderResponse.json();

    // Fetch product items for this order
    const itemsResponse = await fetch(`${API_URL}/${orderId}/items`);
    const items = itemsResponse.ok ? await itemsResponse.json() : [];

    // Populate form fields
    document.getElementById('editProjectName').textContent = order.project_name || order.project || '';
    document.getElementById('editProjectCode').textContent = order.projectcodenumber || '';
    document.getElementById('editSupplierName').value = order.supplier_name || order.supplier || '';
    document.getElementById('editSupplierGst').value = order.supplier_gst || '';
    document.getElementById('editSupplierAddress').value = order.supplier_address || '';

    // Populate date required display
    document.getElementById('dateRequiredValue').textContent = formatDate(order.date_required);

    // Set single supplier checkbox
    document.getElementById('editSingleSupplier').checked = order.single || false;

    // Populate product table with fetched items
    populateEditProductTable(order, items);

    // Populate notes display (non-editable)
    const notesDisplay = document.getElementById('editNotesDisplay');
    if (order.notes && order.notes.trim() !== '') {
      notesDisplay.textContent = order.notes;
    } else {
      notesDisplay.textContent = 'No notes available.';
    }

    document.getElementById('editModal').classList.remove('hidden');
  } catch (error) {
    console.error('Error fetching order details:', error);
    alert('Failed to load order details. Please try again.');
  }
}

// Helper function to format date
function formatDate(dateString) {
  if (!dateString) return '';
  const date = new Date(dateString);
  return date.toLocaleDateString();
}

function closeEditModal() {
  document.getElementById('editModal').classList.add('hidden');
  document.getElementById('editOrderForm').reset();
}

function closeEdit() {
  closeEditModal();
}

// Handle Edit Form Submission
document.getElementById('editOrderForm').addEventListener('submit', async function(e) {
  e.preventDefault();

  // Collect product details
  const products = [];
  const productRows = document.querySelectorAll('#editProductTableBody tr');

  productRows.forEach(row => {
    const product = {
      partNo: row.querySelector('.edit-part-no').value,
      description: row.querySelector('.edit-description').value,
      hsnCode: row.querySelector('.edit-hsn').value,
      quantity: row.querySelector('.edit-quantity').value,
      unitPrice: row.querySelector('.edit-unit-price').value,
      gst: row.querySelector('.edit-gst').value,
      unit: row.querySelector('.edit-unit').value,
      discount: row.querySelector('.edit-discount').value
    };
    products.push(product);
  });

  const formData = {
    supplier_name: document.getElementById('editSupplierName').value,
    supplier_gst: document.getElementById('editSupplierGst').value,
    supplier_address: document.getElementById('editSupplierAddress').value
  };

  try {
    // Update order details
    const response = await fetch(`${API_URL}/${currentEditId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formData)
    });

    if (!response.ok) throw new Error('Failed to update order');

    // Update product items
    const itemsResponse = await fetch(`${API_URL}/${currentEditId}/items`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ products })
    });

    if (!itemsResponse.ok) throw new Error('Failed to update product items');

    // Handle file uploads if any
    const files = document.getElementById('newQuotationFile').files;
    if (files.length > 0) {
      const fileFormData = new FormData();
      for (let file of files) {
        fileFormData.append('quotations', file);
      }

      const fileResponse = await fetch(`${API_URL}/${currentEditId}/quotations`, {
        method: 'POST',
        body: fileFormData
      });

      if (!fileResponse.ok) {
        console.warn('File upload failed, but order details were updated');
      }
    }

    alert('Order updated successfully! ✅');
    closeEditModal();
    loadPurchaseOrders(); // Reload the current tab data
    loadSummaryCounts();

  } catch (error) {
    console.error('Error updating order:', error);
    alert('Failed to update order. Please try again.');
  }
});

// Product table functions for edit modal
function populateEditProductTable(order, items = []) {
  const tbody = document.getElementById('editProductTableBody');
  tbody.innerHTML = '';

  if (items && items.length > 0) {
    items.forEach((product, index) => {
      addEditProductRow(product, index + 1);
    });
  } else {
    addEditProductRow(null, 1);
  }

  calculateEditTotal();
}

function addEditProductRow(product = null, slNo = null) {
  const tbody = document.getElementById('editProductTableBody');
  const row = document.createElement('tr');

  if (!slNo) {
    const rows = tbody.querySelectorAll('tr');
    slNo = rows.length + 1;
  }

  row.innerHTML = `
    <td class="px-6 py-3 border text-center">${slNo}</td>
    <td class="px-6 py-3 border">
      <input type="text" class="w-full border border-gray-300 p-1 text-sm edit-part-no" value="${product ? product.partno || '' : ''}" placeholder="Part No">
    </td>
    <td class="px-6 py-3 border">
      <input type="text" class="w-full border border-gray-300 p-1 text-sm edit-description" value="${product ? product.description || '' : ''}" placeholder="Description" readonly>
    </td>
    <td class="px-6 py-3 border">
      <input type="text" class="w-full border border-gray-300 p-1 text-sm edit-hsn" value="${product ? product.hsncode || '' : ''}" placeholder="HSN Code">
    </td>
    <td class="px-6 py-3 border">
      <input type="number" class="w-full border border-gray-300 p-1 text-sm edit-quantity" value="${product ? product.quantity || '' : ''}" placeholder="Qty" min="1">
    </td>
    <td class="px-6 py-3 border">
      <input type="number" class="w-full border border-gray-300 p-1 text-sm edit-unit-price" value="${product ? product.unitprice || '' : ''}" placeholder="Price" step="0.01">
    </td>
    <td class="px-6 py-3 border">
      <input type="number" class="w-full border border-gray-300 p-1 text-sm edit-gst" value="${product ? product.gst || '' : ''}" placeholder="GST %" step="0.01">
    </td>
    <td class="px-6 py-3 border">
      <input type="text" class="w-full border border-gray-300 p-1 text-sm edit-unit" value="${product ? product.unit || '' : ''}" placeholder="Unit">
    </td>
    <td class="px-6 py-3 border">
      <input type="number" class="w-full border border-gray-300 p-1 text-sm edit-discount" value="${product ? product.discount || '' : ''}" placeholder="Discount" step="0.01">
    </td>
    <td class="px-6 py-3 border">
      <input type="number" class="w-full border border-gray-300 p-1 text-sm edit-total" value="${product ? product.total || '' : ''}" placeholder="Total" readonly>
    </td>
    <td class="px-6 py-3 border text-center">
      <button type="button" class="text-red-500 hover:text-red-700 delete-edit-row" title="Delete Row">
        <i class="fas fa-trash"></i>
      </button>
    </td>
  `;

  tbody.appendChild(row);

  calculateEditRowTotal(row);

  // Add event listeners
  row.querySelector('.delete-edit-row').addEventListener('click', function() {
    row.remove();
    updateEditSlNos();
    calculateEditTotal();
  });

  row.querySelectorAll('input').forEach(input => {
    input.addEventListener('input', function() {
      calculateEditRowTotal(row);
      calculateEditTotal();
    });
  });
}

function updateEditSlNos() {
  const rows = document.querySelectorAll('#editProductTableBody tr');
  rows.forEach((row, index) => {
    row.cells[0].textContent = index + 1;
  });
}

function calculateEditRowTotal(row) {
  const quantity = parseFloat(row.querySelector('.edit-quantity').value) || 0;
  const unitPrice = parseFloat(row.querySelector('.edit-unit-price').value) || 0;
  const gst = parseFloat(row.querySelector('.edit-gst').value) || 0;
  const discount = parseFloat(row.querySelector('.edit-discount').value) || 0;

  const subtotal = quantity * unitPrice;
  const discountAmount = discount;
  const discountedSubtotal = subtotal - discountAmount;
  const gstAmount = discountedSubtotal * (gst / 100);
  const total = discountedSubtotal + gstAmount;

  row.querySelector('.edit-total').value = total.toFixed(2);
}

function calculateEditTotal() {
  const rows = document.querySelectorAll('#editProductTableBody tr');
  let grandTotal = 0;

  rows.forEach(row => {
    const total = parseFloat(row.querySelector('.edit-total').value) || 0;
    grandTotal += total;
  });

  document.getElementById('editGrandTotal').textContent = `₹${grandTotal.toFixed(2)}`;
}













    async function generatePO(orderId) {
  try {
    // Open the PDF in a new tab by directly navigating to the PDF endpoint
    window.open(`/api/orders/${orderId}/pdf`, "_blank");
  } catch (err) {
    console.error("Error:", err);
    alert("Something went wrong");
  }
}

  </script>
</body>
</html>
























