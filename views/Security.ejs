<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Security Verification - All Orders</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
       :root {
      --primary: #2563eb;
      --primary-dark: #1e3a8a;
      --secondary: #dc2626;
      --success: #16a34a;
      --light: #ffffff;
      --dark: #1f2937;
      --gray: #6b7280;
      --bg: #f9fafb;
      --card: #ffffff;
      --shadow: 0 4px 12px rgba(0,0,0,0.08);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: "Inter", "Segoe UI", Tahoma, sans-serif;
      background: var(--bg);
      color: var(--dark);
      line-height: 1.6;
    }

    /* Header */
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: var(--primary);
      color: white;
      padding: 12px 20px;
      box-shadow: var(--shadow);
    }

    .header img {
      height: 100px;
    }

    .user-info {
      display: flex;
      align-items: center;
      gap: 12px;
      font-size: 14px;
    }

    .user-avatar {
      width: 38px;
      height: 38px;
      border-radius: 50%;
      background: rgba(255,255,255,0.2);
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
    }

    .logout-btn {
      background: var(--secondary);
      border: none;
      padding: 8px 14px;
      border-radius: 6px;
      color: #fff;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: background 0.3s;
    }
    .logout-btn:hover {
      background: #b91c1c;
    }

    /* Container */
    .container {
      max-width: 1000px;
      margin: 30px auto;
      padding: 0 16px;
    }

    h2 {
      text-align: center;
      font-size: 24px;
      font-weight: 600;
      margin-bottom: 25px;
      position: relative;
      color: var(--dark);
    }
    h2::after {
      content: "";
      width: 60px;
      height: 3px;
      background: var(--primary);
      display: block;
      margin: 8px auto 0;
      border-radius: 3px;
    }

    /* Card */
    .card {
      background: var(--card);
      border-radius: 12px;
      padding: 20px;
      box-shadow: var(--shadow);
    }

    /* Orders */
    .order-card {
      background: var(--bg);
      border-radius: 10px;
      padding: 16px;
      margin-bottom: 16px;
      border: 1px solid #e5e7eb;
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    .order-card:hover {
      transform: translateY(-3px);
      box-shadow: var(--shadow);
    }

    .order-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
    }

    .supplier-name {
      font-weight: 600;
      color: var(--primary-dark);
    }

    .order-id {
      font-size: 13px;
      color: var(--gray);
    }

    .toggle-products-btn {
      background: none;
      border: none;
      font-size: 18px;
      cursor: pointer;
      color: var(--gray);
      transition: color 0.2s;
    }
    .toggle-products-btn:hover {
      color: var(--primary);
    }

    .product-list {
      margin-top: 10px;
    }

    .product-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: var(--card);
      border: 1px solid #e5e7eb;
      border-radius: 6px;
      padding: 10px 14px;
      margin-bottom: 8px;
      font-size: 14px;
    }

    input[type="checkbox"] {
      appearance: none;
      width: 18px;
      height: 18px;
      border: 2px solid #d1d5db;
      border-radius: 4px;
      cursor: pointer;
      position: relative;
      transition: 0.2s;
    }
    input[type="checkbox"]:checked {
      background: var(--success);
      border-color: var(--success);
    }
    input[type="checkbox"]:checked:before {
      content: "✓";
      color: white;
      font-size: 12px;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }

    .complete-btn {
      background: var(--success);
      border: none;
      color: #fff;
      padding: 8px 14px;
      border-radius: 6px;
      margin-top: 10px;
      font-size: 14px;
      cursor: pointer;
      font-weight: 500;
      display: none;
      transition: background 0.3s;
    }
    .complete-btn:hover {
      background: #15803d;
    }
    .complete-btn:disabled {
      background: #9ca3af;
      cursor: not-allowed;
    }

    /* Toast */
    .toast {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 12px 20px;
      background: var(--success);
      color: white;
      border-radius: 6px;
      box-shadow: var(--shadow);
      font-size: 14px;
      opacity: 0;
      transform: translateX(120%);
      transition: all 0.4s ease;
      z-index: 1000;
    }
    .toast.show {
      opacity: 1;
      transform: translateX(0);
    }
    .toast.error {
      background: var(--secondary);
    }

    /* Responsive */
    @media (max-width: 768px) {
      .order-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 6px;
      }
    }
    .modal {
      display: none;
      position: fixed;
      top: 0; left: 0;
      width: 100%; height: 100%;
      background: rgba(0,0,0,0.5);
      backdrop-filter: blur(2px);
      justify-content: center;
      align-items: center;
      z-index: 2000;
    }
    .modal-content {
      background: #fff;
      padding: 20px;
      border-radius: 10px;
      width: 90%;
      max-width: 500px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.2);
      animation: fadeIn 0.3s ease;
    }
    .modal-header {
      font-size: 18px;
      font-weight: bold;
      margin-bottom: 10px;
      color: #1e3a8a;
    }
    .modal-body {
      max-height: 300px;
      overflow-y: auto;
      margin-bottom: 15px;
      font-size: 14px;
    }
    .modal-actions {
      text-align: right;
      margin-top: 10px;
    }
    .close-btn, .submit-btn {
      padding: 8px 14px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 500;
    }
    .close-btn {
      background: #6b7280;
      color: #fff;
      margin-right: 8px;
    }
    .close-btn:hover { background: #4b5563; }
    .submit-btn {
      background: #16a34a;
      color: #fff;
    }
    .submit-btn:hover { background: #15803d; }
  </style>
</head>
<body>

  <!-- Header -->
  <div class="header">
    
      <img src="images/wt_img.png" alt="company logo" style="margin-left: 10px;">
    
    <div class="user-info">
      <div class="user-avatar">SO
      </div>
      <span>Security Officer</span>
      <button class="logout-btn" onclick="logout()">Logout</button>
    </div>
  </div>

  <div class="container">
    <h2>Security Verification</h2>

    <div class="card">
      <div class="order-list" id="orderList">
        <!-- Orders will be populated here -->
      </div>
    </div>
  </div>

  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <span>✅ Order completed successfully!</span>
  </div>

  <script>
    // DOM elements
    const orderList = document.getElementById('orderList');
    const toast = document.getElementById('toast');

    let orders = [];

    // Load orders on page load
    document.addEventListener('DOMContentLoaded', loadOrders);

    // Load orders from DB
    async function loadOrders() {
      try {
        const response = await fetch('/api/orders/search/filter?status=approved', {
          credentials: 'include'
        });
        if (response.ok) {
          const orderIds = await response.json();
          // Fetch full details for each order
          orders = [];
          for (const order of orderIds) {
            const detailResponse = await fetch(`/api/orders/${order.id}`, {
              credentials: 'include'
            });
            if (detailResponse.ok) {
              const fullOrder = await detailResponse.json();
              orders.push(fullOrder);
            }
          }
          populateOrderList();
        } else {
          showToast("Failed to load orders", true);
        }
      } catch (error) {
        console.error('Error loading orders:', error);
        showToast("Error loading orders", true);
      }
    }

      // Populate order list
      function populateOrderList() {
        orderList.innerHTML = '';
        orders.forEach(order => {
          const orderCard = document.createElement('div');
          orderCard.className = 'order-card';
          orderCard.setAttribute('data-id', order.id);

          // Add an icon button to toggle product details visibility
          const toggleButtonId = `toggle-btn-${order.id}`;
          const productListId = `product-list-${order.id}`;

          let productHTML = '';
          if (order.items) {
            order.items.forEach(item => {
              productHTML += `
                <div class="product-item">
                  <div class="product-detail">${item.description} - Qty: ${item.quantity}</div>
                  <input type="checkbox" class="verify-checkbox" data-order-id="${order.id}" data-item-id="${item.id}">
                </div>
              `;
            });
          }

          orderCard.innerHTML = `
            <div class="order-header">
              <div class="supplier-name">${order.supplier}</div>
              <div class="order-id">Order ${order.id}</div>
              <button id="${toggleButtonId}" class="toggle-products-btn" aria-label="Toggle products">&#x1F4E6;</button>
            </div>
          `;

          // Create a modal container for preview
          const modalId = `modal-${order.id}`;
          const modalHTML = `
            <div id="${modalId}" class="modal" style="display:none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10000; justify-content: center; align-items: center;">
              <div class="modal-content" style="background: white; padding: 20px; border-radius: 8px; max-width: 600px; width: 90%; max-height: 80%; overflow-y: auto; position: relative;">
                <span class="close-btn" style="position: absolute; top: 10px; right: 15px; font-size: 20px; color: red; cursor: pointer;">&times;</span>
                <h3>Order ${order.id} - Products</h3>
                <div class="product-list" id="${productListId}">
                  Loading...
                </div>
              </div>
            </div>
          `;
          orderList.appendChild(orderCard);
          orderList.insertAdjacentHTML('beforeend', modalHTML);

          orderList.appendChild(orderCard);

          // Add event listener for toggle button
          const toggleBtn = document.getElementById(toggleButtonId);
          const modal = document.getElementById(modalId);
          const productListDiv = modal.querySelector('.product-list');
          const completeBtn = modal.querySelector('.complete-btn');
          const closeBtn = modal.querySelector('.close-btn');

          toggleBtn.addEventListener('click', async () => {
            modal.style.display = 'flex';
            if (!productListDiv.hasAttribute('data-loaded')) {
              try {
                const response = await fetch(`/api/orders/${order.id}/items`, { credentials: 'include' });
                if (response.ok) {
                  const items = await response.json();
                  let productHTML = '';
                  items.forEach(item => {
                    productHTML += `
                      <div class="product-item">
                  <div class="product-detail">${item.description} - Qty: ${item.quantity}</div>
                  <input type="checkbox" class="verify-checkbox" data-order-id="${order.id}" data-item-id="${item.id}">
                </div>
              `;
            });
                  productListDiv.innerHTML = productHTML + `<button class="complete-btn" data-order-id="${order.id}" disabled style="margin-top: 15px;">Submit</button>`;
                  const checkboxes = productListDiv.querySelectorAll('.verify-checkbox');
                  const completeBtn = productListDiv.querySelector('.complete-btn');
                  checkboxes.forEach(checkbox => {
                    checkbox.addEventListener('change', () => {
                      const allChecked = Array.from(checkboxes).every(cb => cb.checked);
                      completeBtn.disabled = !allChecked;
                      completeBtn.style.display = allChecked ? 'block' : 'none';
                    });
                  });
                  completeBtn.addEventListener('click', async () => {
                    const orderId = completeBtn.getAttribute('data-order-id');
                    await completeOrder(orderId);
                  });

            productListDiv.setAttribute('data-loaded', 'true');
          } else {
            showToast("Failed to load order items", true);
          }
        } catch (error) {
          console.error('Error loading order items:', error);
          showToast("Error loading order items", true);
        }
      }
    });

          closeBtn.addEventListener('click', () => {
            modal.style.display = 'none';
          });

          // Close modal on outside click
          modal.addEventListener('click', (e) => {
            if (e.target === modal) {
              modal.style.display = 'none';
            }
          });
        });

        // Set up checkbox event listeners
        setupCheckboxes();
      }

    // Set up checkbox functionality
    function setupCheckboxes() {
      const checkboxes = document.querySelectorAll('.verify-checkbox');

      checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', (e) => {
          const orderId = e.target.getAttribute('data-order-id');
          const orderCard = document.querySelector(`.order-card[data-id="${orderId}"]`);
          const orderCheckboxes = orderCard.querySelectorAll('.verify-checkbox');
          const completeBtn = orderCard.querySelector('.complete-btn');

          const allChecked = Array.from(orderCheckboxes).every(cb => cb.checked);
          completeBtn.disabled = !allChecked;
          completeBtn.style.display = allChecked ? 'block' : 'none';
        });
      });

      // Set up complete button event listeners
      const completeBtns = document.querySelectorAll('.complete-btn');
      completeBtns.forEach(btn => {
        btn.addEventListener('click', async (e) => {
          const orderId = e.target.getAttribute('data-order-id');
          await completeOrder(orderId);
        });
      });
    }

    // Complete order
    async function completeOrder(orderId) {
      try {
        // Mark order as received
        const response = await fetch(`/api/orders/${orderId}/receive`, {
          method: 'PUT',
          credentials: 'include'
        });
        if (response.ok) {
          // Additionally, update all items status to 'received'
          const itemsResponse = await fetch(`/api/orders/${orderId}/items`, {
            credentials: 'include'
          });
          if (itemsResponse.ok) {
            const items = await itemsResponse.json();
            // For each item, update status to 'received' via API if such endpoint exists
            // Since no endpoint is visible, this might require backend update
            // For now, assume backend updates all items when order status is updated
          }
          showToast("Order completed successfully!");
          // Reload orders to update the list
          loadOrders();
        } else {
          showToast("Failed to complete order", true);
        }
      } catch (error) {
        console.error('Error completing order:', error);
        showToast("Error completing order", true);
      }
    }

    // Show toast notification
    function showToast(message, isError = false) {
      toast.querySelector("span").textContent = message;

      if (isError) {
        toast.classList.add("error");
      } else {
        toast.classList.remove("error");
      }

      toast.classList.add("show");

      setTimeout(() => {
        toast.classList.remove("show");
      }, 3000);
    }

    function logout() {
      showToast("Logged out successfully!");
      setTimeout(() => {
        // In a real app, this would redirect to login page
        window.location.href = "/";
      }, 1000);
    }
  </script>
</body>
</html>
