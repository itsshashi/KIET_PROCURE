<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Management Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        /* Your existing CSS remains unchanged */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f7fa;
            color: #333;
        }
        
       
        .container {
            display: flex;
            min-height: 100vh;
        }
        
        /* Sidebar Styles */
        .sidebar {
            width: 250px;
            background: linear-gradient(135deg, #4f88c1, #385573);
            color: white;
            padding: 20px 0;
            box-shadow: 0 0 15px rgba(66, 123, 153, 0.77);
        }
        
        .logo {
            padding: 0 20px 20px;
            border-bottom: 1px solid rgba(76, 106, 161, 0.708);
            margin-bottom: 20px;
            display: flex;
            justify-content: center;
        }
        
        .logo img {
            max-width: 180px;
            height: auto;
        }
        
        .menu {
            list-style: none;
        }
        
        .menu-item {
            padding: 15px 20px;
            display: flex;
            align-items: center;
            gap: 15px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .menu-item:hover, .menu-item.active {
            background-color: rgba(255, 255, 255, 0.1);
            border-left: 4px solid #4CAF50;
        }
        
        /* Main Content Styles */
        .main-content {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }
        
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 15px;
            border-bottom: 1px solid #e0e0e0;
        }
        
        .header h2 {
            font-size: 24px;
            color: #2c3e50;
        }
        
        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #4CAF50;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }
        
        /* Tab Content Styles */
        .tab-content {
            display: none;
            background: white;
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        }
        
        .tab-content.active {
            display: block;
            animation: fadeIn 0.5s;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .tab-header {
            margin-bottom: 25px;
        }
        
        .tab-header h3 {
            font-size: 22px;
            color: #2c3e50;
            margin-bottom: 10px;
        }
        
        /* Form Styles */
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #2c3e50;
        }
        
        .form-control {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 16px;
            transition: border 0.3s;
        }
        
        .form-control:focus {
            outline: none;
            border-color: #4CAF50;
            box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);
        }
        
        .form-row {
            display: flex;
            gap: 20px;
        }
        
        .form-row .form-group {
            flex: 1;
        }
        
        .btn {
            padding: 12px 25px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 500;
            transition: background 0.3s;
        }
        
        .btn:hover {
            background-color: #3d8b40;
        }
        
        /* Status Tab Styles */
       .status-cards {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 20px;
        align-items: stretch; /* ensures equal height */
        }

        .status-card {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 100%; /* stretch all cards equally */
        padding: 20px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
        transition: transform 0.3s;
        }

        .status-header {
        display: flex;
        align-items: flex-start;
        justify-content: space-between;
        flex-wrap: wrap; /* allows badges to wrap neatly */
        gap: 8px;
        margin-bottom: 10px;
        }

        .status-body {
        flex-grow: 1; /* pushes footer down */
        }

        .status-footer {
        border-top: 1px solid #eee;
        padding-top: 10px;
        margin-top: 10px;
        }

        
        .status-card:hover {
            transform: translateY(-5px);
        }
        
        .status-card.pending {
            border-left-color: #FF9800;
        }
        
        .status-card.approved {
            border-left-color: #4CAF50;
        }
        
        .status-card.rejected {
            border-left-color: #F44336;
        }
        
        .status-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .status-badge {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
        }
        
        .badge-pending {
            background-color: #FFF3E0;
            color: #FF9800;
        }
        
        .badge-approved {
            background-color: #E8F5E9;
            color: #4CAF50;
        }
        
        .badge-rejected {
            background-color: #FFEBEE;
            color: #F44336;
        }
        
        .status-details {
            margin-top: 15px;
            border-top: 1px solid #eee;
            padding-top: 15px;
        }
        
        .detail-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
        }
        
        /* Order Tracking Visualization */
        .tracking-progress {
            display: flex;
            justify-content: space-between;
            position: relative;
            margin: 30px 0;
            padding: 0 40px;
        }
        
        .tracking-progress::before {
            content: '';
            position: absolute;
            top: 12px;
            left: 0;
            right: 0;
            height: 4px;
            background: #e0e0e0;
            z-index: 1;
        }
        
        .progress-bar {
            position: absolute;
            top: 12px;
            left: 0;
            height: 4px;
            background: #4CAF50;
            z-index: 2;
            transition: width 1s ease-in-out;
        }
        
        .tracking-step {
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
            z-index: 3;
        }
        
        .step-icon {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background: #e0e0e0;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 8px;
            color: white;
            font-size: 14px;
        }
        
        .step-icon.active {
            background: #4CAF50;
        }
        
        .step-label {
            font-size: 12px;
            text-align: center;
            color: #757575;
        }
        
        .step-label.active {
            color: #4CAF50;
            font-weight: 500;
        }
        
        /* Product Table Styles */
        .product-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        
        .product-table th, .product-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }
        
        .product-table th {
            background-color: #f8f9fa;
            font-weight: 600;
        }
        
        .product-table input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        .product-table .actions {
            display: flex;
            gap: 10px;
        }
        
        .action-btn {
            padding: 5px;
            border: none;
            background: none;
            cursor: pointer;
            color: #666;
        }
        
        .action-btn:hover {
            color: #4CAF50;
        }
        
        .priority-badge {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 500;
        }
        
        .priority-high {
            background-color: #ffebee;
            color: #f44336;
        }
        
        .priority-medium {
            background-color: #fff3e0;
            color: #ff9800;
        }
        
        .priority-low {
            background-color: #e8f5e9;
            color: #4caf50;
        }
        
        /* Responsive Styles */
        @media (max-width: 992px) {
            .container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                padding: 10px;
            }
            
            .form-row {
                flex-direction: column;
                gap: 0;
            }
            
            .status-cards {
                grid-template-columns: 1fr;
            }
            
            .product-table {
                display: block;
                overflow-x: auto;
            }
            
            .tracking-progress {
                padding: 0 20px;
            }
            
            .step-label {
                font-size: 10px;
            }
        }
        
        /* Animation for order tracking */
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        .pulse {
            animation: pulse 2s infinite;
        }
        
        /* ... (all other CSS remains exactly the same) ... */
        
    </style>
</head>
<body>
    <div class="container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="logo">
                <img src="images/wt_img.png" alt="Company Logo">
            </div>
            <ul class="menu">
                <li class="menu-item active" data-tab="raise-order">
                    <i class="fas fa-plus-circle"></i> Raise Order
                </li>
                <li  class="menu-item" data-tab="status">
                    <i class="fas fa-tasks"></i> Status
                </li>
                <li class="menu-item" id="logout-btn">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </li>
            </ul>
        </div>
        
        <!-- Main Content -->
        <div class="main-content">
            <div class="header">
                <h2>Order Management Dashboard</h2>
                <div class="user-info">
                    <div class="user-avatar"><% const out_fl1 = out_fl.slice(0, 2); %>
                        <%= out_fl1.toUpperCase() %></div>
                    
                    
                    <span><%= out_fl  %></span>
                </div>
            </div>
            
            <!-- Raise Order Tab -->
            <div class="tab-content active" id="raise-order">
                <div class="tab-header">
                    <h3>Raise New Order</h3>
                    <p>Fill in the details below to create a new order request</p>
                </div>
                

    <!-- Changed form to use FormData instead of JSON -->
    <form action="/order_raise" method="POST" id="orderForm" enctype="multipart/form-data">
  <div class="form-row">
    <div class="form-group">
      <label for="projectName">Project Name *</label>
      <input type="text" class="form-control" id="projectName" name="projectName" required>
    </div>
    <div class="form-group">
      <label for="projectCodeNumber">Project Code *</label>
      <input type="text" class="form-control" id="projectCodeNumber" name="projectCodeNumber" required>
    </div>
  </div>

  <div class="form-row">
    <div class="form-group">
      <label for="supplierName">Supplier Name *</label>
      <input type="text" class="form-control" id="supplierName" name="supplierName" required>
    </div>
    <div class="form-group">
      <label for="supplierGst">Supplier GST *</label>
      <input type="text" class="form-control" id="supplierGst" name="supplierGst" required>
    </div>
  </div>

  <div class="form-group">
    <label for="supplierAddress">Supplier Address *</label>
    <textarea class="form-control" id="supplierAddress" name="supplierAddress" rows="2" required></textarea>
  </div>
  <div class="form-group">
    <label for="quotation">Quotation*</label>
    <input type="file" name="quotation" id="quotation" required>
  </div>

  <div class="form-row">
    <div class="form-group">
      <label for="urgency">Urgency *</label>
      <select class="form-control" id="urgency" name="urgency" required>
        <option value="">Select Urgency</option>
        <option value="high">High - Immediate</option>
        <option value="medium">Medium - Soon</option>
        <option value="low">Low - Normal</option>
      </select>
    </div>
    <div class="form-group">
      <label for="dateRequired">Date Required *</label>
      <input type="date" class="form-control" id="dateRequired" name="dateRequired" required>
    </div>
  </div>

  <h4>Product Details</h4>
  <table class="product-table" id="productTable">
    <thead>
      <tr>
        <th>SL No</th>
        <th>Part No</th>
        <th>Description</th>
        <th>HSN Code</th>
        <th>Quantity</th>
        <th>Unit Price (₹)</th>
        <th>GST %</th>
        <th>Total (₹)</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>1</td>
        <td><input type="text" class="form-control" name="partNo[]" required></td>
        <td><input type="text" class="form-control" name="description[]" required></td>
        <td><input type="text" class="form-control" name="hsn[]" required></td>
        <td><input type="number" class="form-control quantity" name="quantity[]" min="1" value="1" required></td>
        <td><input type="number" class="form-control unit-price" name="unitPrice[]" min="0" step="0.01" value="0" required></td>
        <td><input type="number" class="form-control gst-rate" name="gst[]" min="0" step="0.01" value="18" required></td>
        <td class="total">0.00</td>
        <td>
          <button type="button" class="action-btn delete-row"><i class="fas fa-trash"></i></button>
        </td>
      </tr>
    </tbody>
    <tfoot>
      <tr>
        <td colspan="8" style="text-align:right; font-weight:bold;">Grand Total (₹):</td>
        <td id="grandTotal" style="font-weight:bold;">0.00</td>
        <td>
          <button type="button" class="btn" id="addProductRow"><i class="fas fa-plus"></i> Add</button>
        </td>
      </tr>
    </tfoot>
  </table>

  <div class="form-group">
    <label for="notes">Additional Notes</label>
    <textarea class="form-control" id="notes" name="notes" rows="2"></textarea>
  </div>

  <button type="submit" class="btn">
    <i class="fas fa-paper-plane"></i> Submit Order
  </button>
</form>



            </div>
            
            <!-- Status Tab -->
            <div class="tab-content" id="status">
                <div class="tab-header">
                    <h3>Order Status</h3>
                    <p>Track the status of your orders</p>
                </div>
                
                <div class="status-filters">
                    <div class="form-group">
                        <label for="statusFilter">Filter by Status:</label>
                        <select class="form-control" id="statusFilter">
                            <option value="all">All Statuses</option>
                            <option value="pending">Pending</option>
                            <option value="approved">Approved</option>
                            <option value="rejected">Rejected</option>
                        </select>
                    </div>
                </div>
                
                <!-- Order Tracking Visualization -->
                <div class="tracking-progress" id="orderTracking">
                    <div class="progress-bar" id="progressBar" style="width: 25%;"></div>
                    
                    <div class="tracking-step">
                        <div class="step-icon active pulse"><i class="fas fa-file-alt"></i></div>
                        <div class="step-label active">Order Raised</div>
                    </div>
                    
                    <div class="tracking-step">
                        <div class="step-icon"><i class="fas fa-clipboard-check"></i></div>
                        <div class="step-label">Purchase Dept</div>
                    </div>
                    
                    <div class="tracking-step">
                        <div class="step-icon"><i class="fas fa-check-circle"></i></div>
                        <div class="step-label">Approval</div>
                    </div>
                    
                    <div class="tracking-step">
                        <div class="step-icon"><i class="fas fa-paper-plane"></i></div>
                        <div class="step-label">PO Sent</div>
                    </div>
                    
                    <div class="tracking-step">
                        <div class="step-icon"><i class="fas fa-box-open"></i></div>
                        <div class="step-label">Items Received</div>
                    </div>
                </div>
                
                <div class="status-cards" id="statusCardsContainer">
                    <!-- Status cards will be dynamically generated -->
                </div>
            </div>
        </div>
    </div>

    <script>
        // Sample data for orders
        
        let orders = [];

        async function fetchOrders() {
        try {
            const res = await fetch("/status");
            if (!res.ok) throw new Error("Failed to fetch orders");

            orders = await res.json();
            renderStatusCards();
            updateOrderTracking();
        } catch (err) {
            console.error("❌ Error fetching orders:", err);
            document.getElementById("statusCardsContainer").innerHTML =
            "<p>Could not load your orders.</p>";
        }
        }

        document.addEventListener("DOMContentLoaded", function() {
        // load from backend instead of using sample orders
        fetchOrders();

        setupProductTable();
        setupOrderTracking();

        document.getElementById("statusFilter").addEventListener("change", renderStatusCards);
        });






        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            // Set current date as default for date requested
            const today = new Date().toISOString().split('T')[0];
            
            // Initialize status cards
            renderStatusCards();
            
            // Setup product table functionality
            setupProductTable();
            
            // Setup order tracking visualization
            setupOrderTracking();
            
            // Setup filter handlers
            document.getElementById('statusFilter').addEventListener('change', renderStatusCards);
            
            // Form submission handling - UPDATED FOR FILE UPLOAD
            const orderForm = document.getElementById("orderForm");
            if (orderForm) {
                orderForm.addEventListener("submit", async function(e) {
                    e.preventDefault();
                    
                    // Create FormData object to handle file upload
                    const formData = new FormData(orderForm);
                    
                    // Add product data to the form
                    const products = getProductData();
                    formData.append('products', JSON.stringify(products));
                    
                    try {
                        const res = await fetch("/order_raise", {
                            method: "POST",
                            body: formData // Send as FormData, not JSON
                        });

                        const result = await res.json();
                        alert(result.message);
                    } catch (err) {
                        console.error("❌ Error submitting order:", err);
                        alert("Order submission failed!");
                    }
                });
            }

            // Logout button
      
        // Tab switching functionality
        // Tab switching functionality
        document.querySelectorAll('.menu-item').forEach(item => {
            item.addEventListener('click', function() {
                if (this.id !== 'logout-btn') {
                    // Remove active class from all tabs and menu items
                    document.querySelectorAll('.tab-content').forEach(tab => {
                        tab.classList.remove('active');
                    });
                    document.querySelectorAll('.menu-item').forEach(menuItem => {
                        menuItem.classList.remove('active');
                    });

                    // Add active class to current tab and menu item
                    document.getElementById(this.dataset.tab).classList.add('active');
                    this.classList.add('active');

                    // 👉 When switching to Status tab, fetch fresh orders
                    if (this.dataset.tab === 'status') {
                        fetchOrders();
                    }
                }
            });
        });

        
        // Setup product table functionality
        function setupProductTable() {
            // Add event listener for adding new rows
            document.getElementById('addProductRow').addEventListener('click', addProductRow);
            
            // Add initial event listeners to first row
            addRowEventListeners(document.querySelectorAll('#productTable tbody tr')[0]);
            
            // Calculate initial totals
            calculateRowTotal(document.querySelectorAll('#productTable tbody tr')[0]);
            calculateGrandTotal();
        }
        
        // Add a new row to the product table
        function addProductRow() {
            const tbody = document.querySelector('#productTable tbody');
            const rowCount = tbody.querySelectorAll('tr').length;
            const newRow = document.createElement('tr');
            
            newRow.innerHTML = `
                <td>${rowCount + 1}</td>
                <td><input type="text" class="form-control" name="partNo[]" placeholder="Part Number" required></td>
                <td><input type="text" class="form-control" name="description[]" placeholder="Product Description" required></td>
                <td><input type="text" class="form-control" name="hsn[]" placeholder="HSN Code" required></td>
                <td><input type="number" class="form-control quantity" name="quantity[]" min="1" value="1" required></td>
                <td><input type="number" class="form-control unit-price" name="unitPrice[]" min="0" step="0.01" value="0" required></td>
                <td><input type="number" class="form-control gst-rate" name="gst[]" min="0" step="0.01" value="18" required></td>
                <td class="total">0.00</td>
                <td class="actions">
                    <button type="button" class="action-btn delete-row"><i class="fas fa-trash"></i></button>
                </td>
            `;
            
            tbody.appendChild(newRow);
            addRowEventListeners(newRow);
            
            // Update row numbers
            updateRowNumbers();
        }
        
        // Add event listeners to a table row
        function addRowEventListeners(row) {
            // Quantity change
            row.querySelector('.quantity').addEventListener('input', function() {
                calculateRowTotal(row);
            });
            
            // Unit price change
            row.querySelector('.unit-price').addEventListener('input', function() {
                calculateRowTotal(row);
            });
            
            // GST rate change
            row.querySelector('.gst-rate').addEventListener('change', function() {
                calculateRowTotal(row);
            });
            
            // Delete row
            row.querySelector('.delete-row').addEventListener('click', function() {
                if (document.querySelectorAll('#productTable tbody tr').length > 1) {
                    row.remove();
                    updateRowNumbers();
                    calculateGrandTotal();
                } else {
                    alert('You must have at least one product in your order.');
                }
            });
        }
        
        // Calculate total for a row
        function calculateRowTotal(row) {
            const quantity = parseFloat(row.querySelector('.quantity').value) || 0;
            const unitPrice = parseFloat(row.querySelector('.unit-price').value) || 0;
            const gstRate = parseFloat(row.querySelector('.gst-rate').value) || 0;
            
            const subtotal = quantity * unitPrice;
            const gstAmount = subtotal * (gstRate / 100);
            const total = subtotal + gstAmount;
            
            row.querySelector('.total').textContent = total.toFixed(2);
            calculateGrandTotal();
        }
        
        // Calculate grand total for all products
        function calculateGrandTotal() {
            let grandTotal = 0;
            
            document.querySelectorAll('#productTable tbody tr').forEach(row => {
                const total = parseFloat(row.querySelector('.total').textContent) || 0;
                grandTotal += total;
            });
            
            document.getElementById('grandTotal').textContent = grandTotal.toFixed(2);
            return grandTotal;
        }
        
        // Update row numbers in the table
        function updateRowNumbers() {
            document.querySelectorAll('#productTable tbody tr').forEach((row, index) => {
                row.querySelector('td:first-child').textContent = index + 1;
            });
        }
        
        // Reset product table to initial state
        function resetProductTable() {
            const tbody = document.querySelector('#productTable tbody');
            tbody.innerHTML = '';
            
            // Add initial row
            const newRow = document.createElement('tr');
            newRow.innerHTML = `
                <td>1</td>
                <td><input type="text" class="form-control" name="partNo[]" placeholder="Part Number" required></td>
                <td><input type="text" class="form-control" name="description[]" placeholder="Product Description" required></td>
                <td><input type="text" class="form-control" name="hsn[]" placeholder="HSN Code" required></td>
                <td><input type="number" class="form-control quantity" name="quantity[]" min="1" value="1" required></td>
                <td><input type="number" class="form-control unit-price" name="unitPrice[]" min="0" step="0.01" value="0" required></td>
                <td>
                    <select class="form-control gst-rate" name="gst[]">
                        <option value="0">0%</option>
                        <option value="5">5%</option>
                        <option value="12">12%</option>
                        <option value="18" selected>18%</option>
                        <option value="28">28%</option>
                    </select>
                </td>
                <td class="total">0.00</td>
                <td class="actions">
                    <button type="button" class="action-btn delete-row"><i class="fas fa-trash"></i></button>
                </td>
            `;
            
            tbody.appendChild(newRow);
            addRowEventListeners(newRow);
            calculateGrandTotal();
        }
        
        // Get product data from the table
        function getProductData() {
            const products = [];
            
            document.querySelectorAll('#productTable tbody tr').forEach(row => {
                const partNo = row.querySelector('td:nth-child(2) input').value;
                const description = row.querySelector('td:nth-child(3) input').value;
                const hsn = row.querySelector('td:nth-child(4) input').value;
                const quantity = parseFloat(row.querySelector('.quantity').value) || 0;
                const unitPrice = parseFloat(row.querySelector('.unit-price').value) || 0;
                const gst = parseFloat(row.querySelector('.gst-rate').value) || 0;
                const total = parseFloat(row.querySelector('.total').textContent) || 0;
                
                products.push({
                    partNo,
                    description,
                    hsn,
                    quantity,
                    unitPrice,
                    gst,
                    total
                });
            });
            
            return products;
        }
        
        // Setup order tracking visualization
        function setupOrderTracking() {
            updateOrderTracking();
        }
        
        // Update order tracking visualization based on selected order
        function updateOrderTracking() {
            if (orders.length === 0) return;

            // Map DB status to step numbers
            const stepMap = {
                pending: 1,       // Order Raised
                purchase: 2,      // Purchase Dept
                approved: 3,      // Approval
                sent: 4,          // PO Sent
                received: 5       // Items Received
            };

            const currentOrder = orders[0]; // show first order for now
            const trackingStep = stepMap[currentOrder.status] || 1;
            const progressPercentage = ((trackingStep - 1) / 4) * 100;

            document.getElementById("progressBar").style.width = `${progressPercentage}%`;

            const steps = document.querySelectorAll(".tracking-step");
            steps.forEach((step, index) => {
                const icon = step.querySelector(".step-icon");
                const label = step.querySelector(".step-label");

                if (index < trackingStep) {
                icon.classList.add("active");
                label.classList.add("active");
                if (index === trackingStep - 1) {
                    icon.classList.add("pulse");
                } else {
                    icon.classList.remove("pulse");
                }
                } else {
                icon.classList.remove("active", "pulse");
                label.classList.remove("active");
                }
            });
            }



        
        // Render status cards
        
        
        function renderStatusCards() {
            const container = document.getElementById('statusCardsContainer');
            const statusFilter = document.getElementById('statusFilter').value;
            
            // Filter orders based on status
            let filteredOrders = orders;
            if (statusFilter !== 'all') {
                filteredOrders = orders.filter(order => order.status === statusFilter);
            }
            
            // Clear container
            container.innerHTML = '';
            
            if (filteredOrders.length === 0) {
                container.innerHTML = '<p>No orders found with the selected status.</p>';
                return;
            }
            
            // Create cards for each order
            filteredOrders.forEach(order => {
                const card = document.createElement('div');
                card.className = `status-card ${order.status}`;
                
                // Determine badge class based on status
                let badgeClass = '';
                let statusText = '';
                switch(order.status) {
                    case 'pending':
                        badgeClass = 'badge-pending';
                        statusText = 'Pending Approval';
                        break;
                    case 'approved':
                        badgeClass = 'badge-approved';
                        statusText = 'Approved';
                        break;
                    case 'rejected':
                        badgeClass = 'badge-rejected';
                        statusText = 'Rejected';
                        break;
                    default:
                        badgeClass = 'badge-pending';
                        statusText = order.status || 'Pending';
                }
                
                // Determine priority badge
                let priorityClass = '';
                let priorityText = '';
                switch(order.urgency) {
                    case 'high':
                        priorityClass = 'priority-high';
                        priorityText = 'High Priority';
                        break;
                    case 'medium':
                        priorityClass = 'priority-medium';
                        priorityText = 'Medium Priority';
                        break;
                    case 'low':
                        priorityClass = 'priority-low';
                        priorityText = 'Low Priority';
                        break;
                    default:
                        priorityClass = 'priority-medium';
                        priorityText = order.urgency || 'Normal Priority';
                }
                
                card.innerHTML = `
                    <div class="status-header">
                        <h4>${order.projectName || 'Unnamed Project'} - PO: ${order.purchaseOrderNumber}</h4>
                        <div>
                            <span class="status-badge ${badgeClass}">${statusText}</span>
                            <span class="priority-badge ${priorityClass}">${priorityText}</span>
                        </div>
                    </div>
                    <div class="status-body">
                        <p><strong>Project Code:</strong> ${order.projectCodeNumber || 'N/A'}</p>
                        <p><strong>Supplier:</strong> ${order.supplierName || 'N/A'} (GST: ${order.supplierGst || 'N/A'})</p>
                        <p><strong>Address:</strong> ${order.supplierAddress || 'N/A'}</p>
                    </div>
                    <div class="status-footer">
                        <div class="detail-row">
                            <span>Date Requested:</span>
                            <span>${formatDate(order.created_at)}</span>
                        </div>
                        <div class="detail-row">
                            <span>Date Required:</span>
                            <span>${formatDate(order.dateRequired)}</span>
                        </div>
                        ${order.notes ? `<p><strong>Notes:</strong> ${order.notes}</p>` : ''}
                    </div>
                `;
                
                container.appendChild(card);
            });
        }







        
        // Format date for display
        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric' 
            });
        }
        // Logout button functionality
        document.getElementById('logout-btn').addEventListener('click', async function() {
            if (confirm('Are you sure you want to logout?')) {
                try {
                    const response = await fetch('/logout', {
                        method: 'POST',
                        credentials: 'same-origin'
                    });
                    
                    if (response.ok) {
                        // Redirect to login page after successful logout
                        window.location.href = '/';
                    } else {
                        console.error('Logout failed');
                        alert('Logout failed. Please try again.');
                    }
                } catch (error) {
                    console.error('Error during logout:', error);
                    alert('An error occurred during logout. Please try again.');
                }
            }
        });
    });
    </script>
</body>
</html>