<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Management Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
     
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        body {
            background-color: #f8fafc;
            color: #334155;
            line-height: 1.6;
            
        }
        
  .container {
    display: flex;
    flex-wrap: wrap; /* <-- allows sidebar & content to stack */
    min-height: 100vh;
    width: 100%;
    overflow-x: hidden; /* avoid horizontal scroll */
}
        
        /* Sidebar Styles - Enhanced */
        .sidebar {
            width: 280px;
            background: linear-gradient(180deg, #3b82f6 0%, #1d4ed8 100%);
            color: white;
            padding: 0;
            box-shadow: 0 0 25px rgba(30, 64, 175, 0.2);
            position: relative;
            overflow: hidden;
            z-index: 10;
            
            flex-shrink: 0;
            width: 280px;
            max-width: 100%;
        }
        
        .sidebar::before {
            content: '';
            position: absolute;
            top: -50%;
            right: -50%;
            width: 100%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            z-index: -1;
        }
        
        .logo {
            padding: 25px 25px 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            margin-bottom: 15px;
            display: flex;
            justify-content: center;
            background: rgba(30, 58, 138, 0.3);
        }
        
        .logo img {
            max-width: 200px;
            height: auto;
            filter: brightness(0) invert(1);
        }
        
        .menu {
            list-style: none;
            padding: 0 15px;
        }
        
        .menu-item {
            padding: 16px 20px;
            display: flex;
            align-items: center;
            gap: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            border-radius: 12px;
            margin-bottom: 8px;
            font-weight: 500;
            position: relative;
            overflow: hidden;
        }
        
        .menu-item::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: all 0.5s ease;
        }
        
        .menu-item:hover::before {
            left: 100%;
        }
        
        .menu-item:hover, .menu-item.active {
            background-color: rgba(255, 255, 255, 0.15);
            transform: translateX(5px);
        }
        
        .menu-item i {
            font-size: 1.2rem;
            width: 24px;
            text-align: center;
        }
        
        /* Main Content Styles - Enhanced */
        .main-content {
            flex: 1;
            padding: 30px;
            overflow-y: auto;
            background: #f8fafc;
        }
        
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 35px;
            padding-bottom: 20px;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .header h2 {
        font-size: 28px;
        font-weight: 700;
        background: linear-gradient(90deg, #3b82f6, #1d4ed8);
        background-clip: text;           /* Standard */
        -webkit-background-clip: text;   /* Safari & Chrome */
        -webkit-text-fill-color: transparent; /* Makes text transparent */
        color: transparent;              /* Fallback for browsers without support */
    }

        
        .user-info {
            display: flex;
            align-items: center;
            gap: 12px;
            background: white;
            padding: 8px 16px;
            border-radius: 50px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }
        
        .user-avatar {
            width: 42px;
            height: 42px;
            border-radius: 50%;
            background: linear-gradient(135deg, #3b82f6, #1d4ed8);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            box-shadow: 0 4px 8px rgba(30, 64, 175, 0.3);
        }
        
        /* Tab Content Styles - Enhanced */
        .tab-content {
            display: none;
            background: white;
            border-radius: 16px;
            padding: 30px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.04);
            margin-bottom: 30px;
            border: 1px solid #f1f5f9;
        }
        
        .tab-content.active {
            display: block;
            animation: fadeIn 0.5s;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(15px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .tab-header {
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid #f1f5f9;
        }
        
        .tab-header h3 {
            font-size: 24px;
            color: #1e293b;
            margin-bottom: 8px;
            font-weight: 600;
        }
        
        .tab-header p {
            color: #64748b;
            font-size: 16px;
        }
        
        /* Form Styles - Enhanced */
        .form-group {
            margin-bottom: 24px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 10px;
            font-weight: 500;
            color: #334155;
            font-size: 15px;
        }
        
        .form-control {
            width: 100%;
            padding: 14px 16px;
            border: 1px solid #e2e8f0;
            border-radius: 10px;
            font-size: 16px;
            transition: all 0.3s;
            background: #f8fafc;
        }
        
        .form-control:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.15);
        }
        
        .form-row {
            display: flex;
            gap: 24px;
        }
        
        .form-row .form-group {
            flex: 1;
        }
        
        .btn {
            padding: 14px 28px;
            background: linear-gradient(135deg, #3b82f6, #2563eb);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 500;
            transition: all 0.3s;
            box-shadow: 0 4px 6px rgba(59, 130, 246, 0.2);
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(59, 130, 246, 0.25);
        }
        
        /* Status Tab Styles - Enhanced */
        .status-filters {
            background: white;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 25px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.03);
            border: 1px solid #f1f5f9;
        }
        
        .status-cards {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 24px;
            align-items: stretch;
        }

        .status-card {
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            height: 100%;
            padding: 24px;
            background: white;
            border-radius: 16px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.04);
            transition: all 0.3s ease;
            border-left: 5px solid #3b82f6;
            position: relative;
            overflow: hidden;
            word-wrap: break-word;
            overflow-wrap: break-word;
            max-width: 100%;
        }

        .status-card::after {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 100%;
            height: 5px;
            background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.2));
            transform: translateY(-100%);
            transition: all 0.5s ease;
        }

        .status-card:hover::after {
            transform: translateY(0);
        }

        .status-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 25px rgba(0, 0, 0, 0.08);
        }
        
        .status-card.pending {
            border-left-color: #f59e0b;
        }
        
        .status-card.approved {
            border-left-color: #10b981;
        }
        
        .status-card.rejected {
            border-left-color: #ef4444;
        }
        
        .status-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 18px;
        }
        
        .status-header h4 {
            font-size: 18px;
            color: #1e293b;
            font-weight: 600;
            margin-right: 15px;
        }
        
        .status-badge {
            padding: 6px 14px;
            border-radius: 50px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .badge-pending {
            background-color: #fffbeb;
            color: #f59e0b;
        }
        
        .badge-approved {
            background-color: #ecfdf5;
            color: #10b981;
        }
        
        .badge-rejected {
            background-color: #fef2f2;
            color: #ef4444;
        }
        
        .status-body {
            flex-grow: 1;
        }
        
        .status-body p {
            margin-bottom: 12px;
            color: #475569;
            display: flex;
            flex-wrap: wrap;
            word-wrap: break-word;
            overflow-wrap: break-word;
        }
        
        .status-body strong {
            color: #334155;
            min-width: 120px;
            display: inline-block;
        }
        
        .status-footer {
            border-top: 1px solid #f1f5f9;
            padding-top: 16px;
            margin-top: 16px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: #64748b;
            font-size: 14px;
        }
        
        /* Order Tracking Visualization - Enhanced */
       .tracking-wrapper {
    position: relative;
    width: 100%;
    max-width: 950px;
    margin: 40px auto;
    padding: 30px;
    background: white;
    border-radius: 16px;
    box-shadow: 0 10px 25px rgba(0,0,0,0.05);
    border: 1px solid #f1f5f9;
}

.tracking-wrapper::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 60px;
    right: 60px;
    height: 8px;
    background: #e2e8f0;
    border-radius: 4px;
    z-index: 1;
    transform: translateY(-50%);
}

#progressBar {
    position: absolute;
    top: 50%;
    left: 60px;
    height: 8px;
    background: linear-gradient(90deg, #3b82f6, #2563eb);
    border-radius: 4px;
    z-index: 2;
    transition: width 1.2s cubic-bezier(0.4, 0, 0.2, 1);
    transform: translateY(-50%);
    box-shadow: 0 2px 8px rgba(37, 99, 235, 0.4);
    width: 0; /* Start with 0 width */
}

.tracking-steps {
    display: flex;
    justify-content: space-between;
    position: relative;
    z-index: 3;
    padding: 0 30px;
}

.tracking-step {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
}

.step-icon {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: white;
    border: 3px solid #e2e8f0;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 15px;
    color: #94a3b8;
    font-size: 18px;
    font-weight: bold;
    box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    z-index: 4;
}

.step-label {
    font-size: 14px;
    text-align: center;
    color: #64748b;
    font-weight: 500;
    transition: all 0.4s ease;
    margin-top: 8px;
}

/* Active and completed states */
.step-icon.active {
    background: linear-gradient(135deg, #3b82f6, #2563eb);
    color: white;
    border-color: #bfdbfe;
    transform: scale(1.15);
    box-shadow: 0 6px 20px rgba(37, 99, 235, 0.4);
    animation: pulse 2s infinite;
}

.step-icon.completed {
    background: linear-gradient(135deg, #10b981, #059669);
    color: white;
    border-color: #a7f3d0;
    transform: scale(1.1);
}

.step-icon.completed::after {
    content: '✓';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 22px;
    color: white;
    animation: checkmark 0.8s ease-in-out;
}

.step-label.active {
    color: #2563eb;
    font-weight: 600;
    transform: translateY(-2px);
}

.step-label.completed {
    color: #059669;
    font-weight: 600;
}

/* Responsive adjustments */
@media (max-width: 992px) {
    .tracking-wrapper::before {
        left: 40px;
        right: 40px;
    }
    
    #progressBar {
        left: 40px;
    }
    
    .tracking-steps {
        padding: 0 20px;
    }
    
    .step-icon {
        width: 50px;
        height: 50px;
        font-size: 16px;
    }
    
    .step-label {
        font-size: 12px;
    }
}

@media (max-width: 768px) {
    .tracking-wrapper {
        overflow-x: auto; /* Allow horizontal scrolling on small screens */
    }
    
    .tracking-steps {
        min-width: 700px; /* Ensure all steps are visible when scrolling */
    }
}

        .step-icon {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: white;
            border: 3px solid #e2e8f0;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 15px;
            color: #94a3b8;
            font-size: 18px;
            font-weight: bold;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
            transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            z-index: 4;
        }

        .step-icon.active {
            background: linear-gradient(135deg, #3b82f6, #2563eb);
            color: white;
            border-color: #bfdbfe;
            transform: scale(1.15);
            box-shadow: 0 6px 20px rgba(37, 99, 235, 0.4);
            animation: pulse 2s infinite;
        }

        .step-icon.completed {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            border-color: #a7f3d0;
            transform: scale(1.1);
        }

        .step-icon.completed::after {
            content: '✓';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 22px;
            color: white;
            animation: checkmark 0.8s ease-in-out;
        }

        .step-label {
            font-size: 14px;
            text-align: center;
            color: #64748b;
            font-weight: 500;
            transition: all 0.4s ease;
            margin-top: 8px;
        }

        .step-label.active {
            color: #2563eb;
            font-weight: 600;
            transform: translateY(-2px);
        }

        .step-label.completed {
            color: #059669;
            font-weight: 600;
        }

        /* Enhanced animations */
        @keyframes pulse {
            0% { transform: scale(1.15); box-shadow: 0 6px 20px rgba(37, 99, 235, 0.4); }
            50% { transform: scale(1.2); box-shadow: 0 8px 25px rgba(37, 99, 235, 0.6); }
            100% { transform: scale(1.15); box-shadow: 0 6px 20px rgba(37, 99, 235, 0.4); }
        }

        @keyframes checkmark {
            0% { transform: translate(-50%, -50%) scale(0) rotate(0deg); opacity: 0; }
            50% { transform: translate(-50%, -50%) scale(1.2) rotate(180deg); opacity: 1; }
            100% { transform: translate(-50%, -50%) scale(1) rotate(360deg); opacity: 1; }
        }

        @keyframes slideIn {
            0% { transform: translateX(-20px); opacity: 0; }
            100% { transform: translateX(0); opacity: 1; }
        }

        .tracking-step {
            animation: slideIn 0.6s ease-out;
        }

        .tracking-step:nth-child(1) { animation-delay: 0.1s; }
        .tracking-step:nth-child(2) { animation-delay: 0.2s; }
        .tracking-step:nth-child(3) { animation-delay: 0.3s; }
        .tracking-step:nth-child(4) { animation-delay: 0.4s; }
        .tracking-step:nth-child(5) { animation-delay: 0.5s; }
        
        /* Product Table Styles - Enhanced */
        .product-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            margin: 25px 0;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }
        
        .product-table th {
            background: linear-gradient(135deg, #f1f5f9, #e2e8f0);
            padding: 16px 15px;
            text-align: left;
            font-weight: 600;
            color: #334155;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .product-table td {
            padding: 14px 15px;
            text-align: left;
            border-bottom: 1px solid #f1f5f9;
            background: white;
        }
        
        .product-table tr:last-child td {
            border-bottom: none;
        }
        
        .product-table input {
            width: 100%;
            padding: 10px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.2s;
        }
        
        .product-table input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15);
        }
        
        .product-table .actions {
            display: flex;
            gap: 8px;
        }
        
        .action-btn {
            width: 36px;
            height: 36px;
            border-radius: 8px;
            border: none;
            background: #f8fafc;
            cursor: pointer;
            color: #64748b;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
        }
        
        .action-btn:hover {
            background: #3b82f6;
            color: white;
            transform: scale(1.1);
        }
        
        .priority-badge {
            padding: 5px 10px;
            border-radius: 6px;
            font-size: 12px;
            font-weight: 600;
        }
        
        .priority-high {
            background-color: #fef2f2;
            color: #ef4444;
        }
        
        .priority-medium {
            background-color: #fffbeb;
            color: #f59e0b;
        }
        
        .priority-low {
            background-color: #ecfdf5;
            color: #10b981;
        }
        
        /* Checkbox and phone styles */
        .checky {
            display: flex;
            align-items: center;
            gap: 15px;
            margin: 20px 0;
            padding: 15px;
            background: #f8fafc;
            border-radius: 10px;
        }
        
        .checky label {
            margin: 0;
            font-weight: 600;
            color: #334155;
        }
        
        .chk {
            width: 20px;
            height: 20px;
            accent-color: #3b82f6;
        }
        
        #phone {
            padding: 10px 15px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-size: 15px;
            transition: all 0.2s;
        }
        
        #phone:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15);
        }
        
        /* Responsive Styles */
        @media (max-width: 1200px) {
            .sidebar {
                width: 240px;
            }
            
            .status-cards {
                grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            }
        }
        
        @media (max-width: 992px) {
            .container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                padding: 0;
            }
            
            .form-row {
                flex-direction: column;
                gap: 0;
            }
            
            .status-cards {
                grid-template-columns: 1fr;
            }
            
            .product-table {
                display: block;
                overflow-x: auto;
            }
            
            .tracking-wrapper {
                padding: 20px;
            }
            
            .tracking-wrapper::before {
                left: 40px;
                right: 40px;
            }
            
            #progressBar {
                left: 40px;
            }
            
            .tracking-steps {
                padding: 0 20px;
            }
            
            .step-icon {
                width: 50px;
                height: 50px;
            }
            
            .step-label {
                font-size: 12px;
            }
        }
        
        @media (max-width: 576px) {
            .main-content {
                padding: 20px;
            }
            
            .header {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
            
            .user-info {
                align-self: flex-end;
            }
            
            .tab-content {
                padding: 20px;
            }
            
            .tracking-wrapper::before {
                left: 30px;
                right: 30px;
            }
            
            #progressBar {
                left: 30px;
            }
            
            .tracking-steps {
                padding: 0 10px;
            }
            
            .step-icon {
                width: 40px;
                height: 40px;
                font-size: 14px;
            }
            
            .step-label {
                font-size: 10px;
            }
            
            .status-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
            
            .status-badge {
                align-self: flex-start;
            }
        }
        
        /* Animation for order tracking */
        .pulse {
            animation: pulse 2s infinite;
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: #f1f5f9;
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb {
            background: #cbd5e1;
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: #94a3b8;
        }
        /* ... (all other CSS remains exactly the same) ... */

        /* Loader Styles */
        .loader-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            z-index: 9999;
        }

        .loader-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3b82f6;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .loader-overlay p {
            color: white;
            margin-top: 20px;
            font-size: 18px;
        }

    </style>
</head>
<body>
    <div class="container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="logo">
                <img src="images/wt_img.png" alt="Company Logo">
            </div>
            <ul class="menu">
                <li class="menu-item active" data-tab="raise-order">
                    <i class="fas fa-plus-circle"></i> Raise Order
                </li>
                <li  class="menu-item" data-tab="status">
                    <i class="fas fa-tasks"></i> Status
                </li>

                <li class="menu-item" id="logout-btn">
                
    <form action="/logout" method="post">
<i class="fas fa-sign-out-alt"></i>
   
        <button type="submit" style="background:none;border:none;color:inherit;cursor:pointer;">
            Logout
        </button>
    </form>
</li>

                
            </ul>
        </div>
        
        <!-- Main Content -->
        <div class="main-content">
            <div class="header">
                <h2>Order Management Dashboard</h2>
                <div class="user-info">
                    <div class="user-avatar"><% const out_fl1 = out_fl.slice(0, 2); %>
                        <%= out_fl1.toUpperCase() %></div>
                    
                    
                    <span><%= out_fl  %></span>
                </div>
            </div>
            
            <!-- Raise Order Tab -->
            <div class="tab-content active" id="raise-order">
                <div class="tab-header">
                    <h3>Raise New Order</h3>
                    <p>Fill in the details below to create a new order request</p>
                </div>
                

    <!-- Changed form to use FormData instead of JSON -->
    <form action="/order_raise" method="POST" id="orderForm" enctype="multipart/form-data">
  <div class="form-row">
    <div class="form-group">
      <label for="projectName">Project Name *</label>
      <input type="text" class="form-control" id="projectName" name="projectName" required>
    </div>
    <div class="form-group">
      <label for="projectCodeNumber">Project Code *</label>
      <input type="text" class="form-control" id="projectCodeNumber" name="projectCodeNumber" required>
    </div>
  </div>

  <div class="form-row">
    <div class="form-group">
      <label for="supplierName">Supplier Name </label>
      <input type="text" class="form-control" id="supplierName" name="supplierName" >
    </div>
   
    <div class="form-group">
      <label for="supplierGst">Supplier GSTIN </label>
      <input type="text" class="form-control" id="supplierGst" name="supplierGst" >
    </div>
  </div>

  <div class="form-group">
    <label for="supplierAddress">Supplier Address </label>
    <textarea class="form-control" id="supplierAddress" name="supplierAddress" rows="2" ></textarea>
  </div>

  <div class="form-group">
    <label for="shippingAddress">Shipping Address *</label>
    <textarea class="form-control" id="shippingAddress" name="shippingAddress" rows="2" required></textarea>
  </div>

  <div class="form-group">
    <label for="reference_no">Ref number *</label>
    <input style="height: 25px;" type="text" name="reference_no" id="referenceNumber" placeholder="Reference no." required>
  </div>

  <div class="form-group">
    <label for="termsOfPayment">Terms of Payment *</label>
    <input type="text" class="form-control" id="termsOfPayment" name="termsOfPayment" placeholder="e.g., 45 days net" required>
  </div>
    <div class="checky">
      <label for="singleSupplier" style="font-weight: bold;">Single Supplier</label>
      <input type="checkbox" class="chk" id="singleSupplier" name="singleSupplier">
      <label for="contact" style="font-weight: bold;">Contact info</label>
      <input type="tel" id="phone" name="phone" placeholder="+91 -------------" pattern="[0-9]{10}">
    </div>
  <div class="form-group">
    <label for="quotation">Quotation*</label>
    <input type="file" name="quotation" id="quotation" required>
  </div>

  <div class="form-row">
    <div class="form-group">
      <label for="urgency">Urgency *</label>
      <select class="form-control" id="urgency" name="urgency" required>
        <option value="">Select Urgency</option>
        <option value="high">High - Immediate</option>
        <option value="medium">Medium - Soon</option>
        <option value="low">Low - Normal</option>
      </select>
    </div>
    <div class="form-group">
      <label for="dateRequired">Date Required *</label>
      <input type="date" class="form-control" id="dateRequired" name="dateRequired" required>
    </div>
  </div>

  <h4>Product Details</h4>
  <table class="product-table" id="productTable">
    <thead>
      <tr>
        <th>SL No</th>
        <th>Part No</th>
        <th>Description</th>
        <th>HSN Code</th>
        <th>Quantity</th>
        <th>Unit Price (₹)</th>
        <th>GST %</th>
        <th>Unit</th>
        <th>Discount</th>
        <th>Total (₹)</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr> <td>1</td>
          <td><input type="text" class="form-control" name="partNo[]" placeholder="Part Number" required></td>
                <td><input type="text" class="form-control" name="description[]" placeholder="Product Description" required></td>
                <td><input type="text" class="form-control" name="hsn[]" placeholder="HSN Code" ></td>
                <td><input type="number" class="form-control quantity" name="quantity[]" min="1" value="1" required></td>
                <td><input type="number" class="form-control unit-price" name="unitPrice[]" min="0" step="0.01" value="0" required></td>
                <td><input type="number" class="form-control gst-rate" name="gst[]" min="0" step="0.01" value="18" required></td>
                <td><input type='text' class="form-control unit" name="unit[]" placeholder='Unit' ></td>
                <td><input type="number" class="form-control discount" name="discount[]" min="0" step="1" value="0" required></td>
                <td class="total">0.00</td>  
   
        <td>
          <button type="button" class="action-btn delete-row"><i class="fas fa-trash"></i></button>
        </td>
      </tr>
    </tbody>
    <tfoot>
      <tr>
        <td colspan="8" style="text-align:right; font-weight:bold;">Grand Total (₹):</td>
        <td id="grandTotal" style="font-weight:bold;">0.00</td>
        <td>
          <button type="button" class="btn" id="addProductRow"><i class="fas fa-plus"></i> Add</button>
        </td>
      </tr>
    </tfoot>
  </table>

  <div class="form-group">
    <label for="notes">Additional Notes</label>
    <textarea class="form-control" id="notes" name="notes" rows="2"></textarea>
  </div>

  <button type="submit" class="btn">
    <i class="fas fa-paper-plane"></i> Submit Order
  </button>
</form>




            </div>
            
            <!-- Status Tab -->
            <div class="tab-content" id="status">
                <div class="tab-header">
                    <h3>Order Status</h3>
                    <p>Track the status of your orders</p>
                </div>
                
                <div class="status-filters">
                    <div class="form-group">
                        <label for="statusFilter">Filter by Status:</label>
                        <select class="form-control" id="statusFilter">
                            <option value="all">All Statuses</option>
                            <option value="pending">Pending</option>
                            <option value="purchase">Purchase</option>
                            <option value="approved">Approved</option>
                            <option value="rejected">Rejected</option>
                            <option value="sent">Sent</option>
                            <option value="received">Received</option>
                        </select>
                    </div>
                </div>
                
              <div class="tracking-wrapper">
  <!-- Progress line -->
            <div id="progressBar"></div>

            <!-- Steps -->
            <div class="tracking-steps">
                <div class="tracking-step">
                <div class="step-icon">1</div>
                <span class="step-label">Pending</span>
                </div>
                <div class="tracking-step">
                <div class="step-icon">2</div>
                <span class="step-label">Purchase</span>
                </div>
                <div class="tracking-step">
                <div class="step-icon">3</div>
                <span class="step-label">Approved</span>
                </div>
                <div class="tracking-step">
                <div class="step-icon">4</div>
                
                <span class="step-label">Sent</span>
                </div>
                <div class="tracking-step">
                <div class="step-icon">5</div>
                <span class="step-label">Received</span>
                </div>
                   <div class="tracking-step">
      <div class="step-icon">6</div>
      <span class="step-label">Paid</span>
    </div>
                <div class="tracking-step">
                    <div class="step-icon">7</div>
               
                <span class="step-label">Rejected</span>
                </div>
            </div>
            </div>

                
                
                <div class="status-cards" id="statusCardsContainer">
                    <!-- Status cards will be dynamically generated -->
                </div>
            </div>
        </div>
    </div>

    <script>
        // Sample data for orders
        let orders = [];

        async function fetchOrders() {
            try {
                const res = await fetch("/status");
                if (!res.ok) throw new Error("Failed to fetch orders");

                const contentType = res.headers.get("content-type");
                if (!contentType || !contentType.includes("application/json")) {
                    throw new Error("Server returned non-JSON response");
                }

                orders = await res.json();
                renderStatusCards();
                updateOrderTracking();
            } catch (err) {
                console.error("❌ Error fetching orders:", err);
                document.getElementById("statusCardsContainer").innerHTML =
                "<p>Could not load your orders.</p>";
            }
        }

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            // Set current date as default for date requested
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('dateRequired').value = today;

            // Load orders from backend
            fetchOrders();

            // Setup product table functionality
            setupProductTable();

            // Setup order tracking visualization
            setupOrderTracking();

            // Setup filter handlers
            document.getElementById('statusFilter').addEventListener('change', renderStatusCards);

            // Form submission handling - UPDATED FOR FILE UPLOAD
            const orderForm = document.getElementById("orderForm");
            const submitBtn = orderForm.querySelector('button[type="submit"]');
            const loader = document.getElementById("loader");

            orderForm.addEventListener("submit", async function(e) {
                e.preventDefault();

                // Show loader and disable button
                loader.style.display = "flex";
                submitBtn.disabled = true;
                submitBtn.textContent = "Submitting...";

                const formData = new FormData(orderForm);
                const products = getProductData();
                formData.append('products', JSON.stringify(products));

                try {
                    const res = await fetch("/order_raise", {
                        method: "POST",
                        body: formData
                    });

                    const contentType = res.headers.get("content-type");
                    if (!contentType || !contentType.includes("application/json")) {
                        throw new Error("Server returned non-JSON response");
                    }

                    const result = await res.json();

                    if (result.success) {
                        alert(result.message);

                        // 🔹 Reset form fields
                        orderForm.reset();

                        // 🔹 Reset product table
                        resetProductTable();

                        // 🔹 Reset total
                        document.getElementById("grandTotal").textContent = "0.00";
                    } else {
                        alert("Order submission failed: " + (result.error || result.message || "Unknown error"));
                    }
                } catch (err) {
                    console.error("❌ Error submitting order:", err);
                    alert("Order submission failed! Server returned invalid response.");
                } finally {
                    // Hide loader and enable button
                    loader.style.display = "none";
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Order';
                }
            });
        });
        


            // Logout button
      
        // Tab switching functionality
        // Tab switching functionality
        document.querySelectorAll('.menu-item').forEach(item => {
            item.addEventListener('click', function() {
                if (this.id !== 'logout-btn') {
                    // Remove active class from all tabs and menu items
                    document.querySelectorAll('.tab-content').forEach(tab => {
                        tab.classList.remove('active');
                    });
                    document.querySelectorAll('.menu-item').forEach(menuItem => {
                        menuItem.classList.remove('active');
                    });

                    // Add active class to current tab and menu item
                    document.getElementById(this.dataset.tab).classList.add('active');
                    this.classList.add('active');

                    // 👉 When switching to Status tab, fetch fresh orders
                    if (this.dataset.tab === 'status') {
                        fetchOrders();
                    }
                }
            });
        });
        
            
       

        
        // Setup product table functionality
        function setupProductTable() {
            // Add event listener for adding new rows
            document.getElementById('addProductRow').addEventListener('click', addProductRow);
            
            // Add initial event listeners to first row
            addRowEventListeners(document.querySelectorAll('#productTable tbody tr')[0]);
            
            // Calculate initial totals
            calculateRowTotal(document.querySelectorAll('#productTable tbody tr')[0]);
            calculateGrandTotal();
        }
        
        // Add a new row to the product table
        function addProductRow() {
            const tbody = document.querySelector('#productTable tbody');
            const rowCount = tbody.querySelectorAll('tr').length;
            const newRow = document.createElement('tr');
            
            newRow.innerHTML = `
                <td>${rowCount + 1}</td>
                <td><input type="text" class="form-control" name="partNo[]" placeholder="Part Number" required></td>
                <td><input type="text" class="form-control" name="description[]" placeholder="Product Description" required></td>
                <td><input type="text" class="form-control" name="hsn[]" placeholder="HSN Code" ></td>
                <td><input type="number" class="form-control quantity" name="quantity[]" min="1" value="1" required></td>
                <td><input type="number" class="form-control unit-price" name="unitPrice[]" min="0" step="0.01" value="0" required></td>
                <td><input type="number" class="form-control gst-rate" name="gst[]" min="0" step="0.01" value="18" required></td>
                <td><input type='text' class="form-control unit" name="unit[]" placeholder='Unit' ></td>
                <td><input type="number" class="form-control discount" name="discount[]" min="0" step="1" value="0" required></td>
                <td class="total">0.00</td>
                <td class="actions">
                    <button type="button" class="action-btn delete-row"><i class="fas fa-trash"></i></button>
                </td>
            `;
            
            tbody.appendChild(newRow);
            addRowEventListeners(newRow);
            
            // Update row numbers
            updateRowNumbers();
        }
        
        // Add event listeners to a table row
        function addRowEventListeners(row) {
            // Quantity change
            row.querySelector('.quantity').addEventListener('input', function() {
                calculateRowTotal(row);
            });
            
            // Unit price change
            row.querySelector('.unit-price').addEventListener('input', function() {
                calculateRowTotal(row);
            });
            
            // GST rate change
            row.querySelector('.gst-rate').addEventListener('change', function() {
                calculateRowTotal(row);
            });

            row.querySelector('.discount').addEventListener('input', function() {
            calculateRowTotal(row);
    });
            // Delete row
            row.querySelector('.delete-row').addEventListener('click', function() {
                if (document.querySelectorAll('#productTable tbody tr').length > 1) {
                    row.remove();
                    updateRowNumbers();
                    calculateGrandTotal();
                } else {
                    alert('You must have at least one product in your order.');
                }
            });
        }
        
        // Calculate total for a row
        function calculateRowTotal(row) {
    const quantity = parseFloat(row.querySelector('.quantity').value) || 0;
    const unitPrice = parseFloat(row.querySelector('.unit-price').value) || 0;
    const gstRate = parseFloat(row.querySelector('.gst-rate').value) || 0;
    const discount = parseFloat(row.querySelector('.discount').value) || 0;

    // Subtotal before discount
    const subtotal = quantity * unitPrice;

    // Apply discount to subtotal (not per unit)
    const discountedSubtotal = subtotal - discount;

    // GST on discounted amount
    const gstAmount = discountedSubtotal * (gstRate / 100);

    // Final total
    const total = discountedSubtotal + gstAmount;

    row.querySelector('.total').textContent = total.toFixed(2);
    calculateGrandTotal();
}

        
        // Calculate grand total for all products
        function calculateGrandTotal() {
            let grandTotal = 0;
            
            document.querySelectorAll('#productTable tbody tr').forEach(row => {
                const total = parseFloat(row.querySelector('.total').textContent) || 0;
                grandTotal += total;
            });
            
            document.getElementById('grandTotal').textContent = grandTotal.toFixed(2);
            return grandTotal;
        }
        
        // Update row numbers in the table
        function updateRowNumbers() {
            document.querySelectorAll('#productTable tbody tr').forEach((row, index) => {
                row.querySelector('td:first-child').textContent = index + 1;
            });
        }
        
        // Reset product table to initial state
        function resetProductTable() {
            const tbody = document.querySelector('#productTable tbody');
            tbody.innerHTML = '';
            
            // Add initial row
            const newRow = document.createElement('tr');
            newRow.innerHTML = `
                <td>1</td>
                <td><input type="text" class="form-control" name="partNo[]" placeholder="Part Number" required></td>
                <td><input type="text" class="form-control" name="description[]" placeholder="Product Description" required></td>
                <td><input type="text" class="form-control" name="hsn[]" placeholder="HSN Code"></td>
                <td><input type="number" class="form-control quantity" name="quantity[]" min="1" value="1" required></td>
                <td><input type="number" class="form-control unit-price" name="unitPrice[]" min="0" step="0.01" value="0" required></td>
                <td><input type="number" class="form-control gst-rate" name="gst[]" min="0" step="0.01" value="18" required></td>
                <td><input type='text' class="form-control unit" name="unit[]" placeholder='Unit' ></td>
                <td><input type="number" class="form-control discount" name="discount[]" min="0" step="1" value="0" required></td>
                <td class="total">0.00</td>
                <td class="actions">
                    <button type="button" class="action-btn delete-row"><i class="fas fa-trash"></i></button>
                </td>
            `;
            
            tbody.appendChild(newRow);
            addRowEventListeners(newRow);
            calculateGrandTotal();
        }
        
        // Get product data from the table
        function getProductData() {
            const products = [];
            
            document.querySelectorAll('#productTable tbody tr').forEach(row => {
                const partNo = row.querySelector('td:nth-child(2) input').value;
                const description = row.querySelector('td:nth-child(3) input').value;
                const hsn = row.querySelector('td:nth-child(4) input').value;
                const quantity = parseFloat(row.querySelector('.quantity').value) || 0;
                const unitPrice = parseFloat(row.querySelector('.unit-price').value) || 0;
                const gst = parseFloat(row.querySelector('.gst-rate').value) || 0;
                const unit = row.querySelector('td:nth-child(8) input').value; // Fixed: get value from select
                const discount = parseFloat(row.querySelector('.discount').value) || 0;
                const total = parseFloat(row.querySelector('.total').textContent) || 0;
                
                
                
                products.push({
                    partNo,
                    description,
                    hsn,
                    quantity,
                    unitPrice,
                    gst,
                    unit,
                    discount,
                    total,
                    grandTotal
                });
            });
            
            return products;
        }
        let selectedOrder = null;

        // Setup order tracking visualization
        function setupOrderTracking() {
            // Initialize with no order selected
            updateOrderTracking(null);
        }

        // Update order tracking visualization based on selected order
        function updateOrderTracking(order) {
            const stepMap = {
                pending: 1,
                purchase: 2,
                approved: 3,
                sent: 4,
                received: 5,
                paid:6,
                rejected: 7
            };

            const progressBar = document.getElementById('progressBar');
            const steps = document.querySelectorAll('.tracking-step .step-icon');
            const labels = document.querySelectorAll('.tracking-step .step-label');

            let currentStep = 0;
            if (order && order.status && stepMap[order.status.toLowerCase()]) {
                currentStep = stepMap[order.status.toLowerCase()];
            }

            // Update progress bar width
            const totalSteps = Object.keys(stepMap).length;
            const progressPercent = ((currentStep - 1) / (totalSteps - 1)) * 100;
            progressBar.style.width = progressPercent + '%';

            // Update step icons and labels
            steps.forEach((stepIcon, index) => {
                stepIcon.classList.remove('active', 'completed');
                labels[index].classList.remove('active', 'completed');

                if (index + 1 < currentStep) {
                    stepIcon.classList.add('completed');
                    labels[index].classList.add('completed');
                } else if (index + 1 === currentStep) {
                    stepIcon.classList.add('active');
                    labels[index].classList.add('active');
                }
            });
        }

        // Render status cards based on orders and filter
        function renderStatusCards() {
            const container = document.getElementById('statusCardsContainer');
            container.innerHTML = '';

            const filter = document.getElementById('statusFilter').value.toLowerCase();

            const filteredOrders = orders.filter(order => {
                if (filter === 'all') return true;
                return order.status.toLowerCase() === filter;
            });

            if (filteredOrders.length === 0) {
                container.innerHTML = '<p>No orders found for the selected status.</p>';
                return;
            }

            filteredOrders.forEach(order => {
                const card = document.createElement('div');
                card.className = 'status-card ' + order.status.toLowerCase();

                card.innerHTML = `
                    <div class="status-header">
                        <h4>${order.purchaseOrderNumber}</h4>
                        <span class="status-badge badge-${order.status.toLowerCase()}">${order.status}</span>
                    </div>
                    <div class="status-body">
                        <p><strong>Project:</strong> ${order.projectName}</p>
                        <p><strong>Supplier:</strong> ${order.supplierName}</p>
                    
                `;

                container.appendChild(card);
                card.addEventListener("click", () => {
                selectedOrder = order;
                updateOrderTracking(order);

            // highlight selected card
                document.querySelectorAll(".status-card").forEach(c => c.classList.remove("active"));
                card.style.background='linear-gradient(135deg, #e0f7fa, #ffffff)';

// remove highlight after 1 second
                setTimeout(() => {
                    card.style.background = "";
                }, 100);
                 // ✅ correct way
        });

            });
        }
    document.getElementById("supplierName").addEventListener("blur", async function () {
      const supplier_name = this.value.trim();
      if (!supplier_name) return;

      try {
        const response = await fetch(`/supplier/${encodeURIComponent(supplier_name)}`);
        if (response.ok) {
          const data = await response.json();
          document.getElementById("supplierAddress").value = data.supplier_address || "";
          document.getElementById("supplierGst").value = data.supplier_gst || "";
          document.getElementById("phone").value=data.contact|| "";
          alert("We found the Suppler🤩 ")
        } else {
          alert("Supplier not found");
        }
      } catch (error) {
        console.error("Error fetching supplier:", error);
      }
    });

        // Select an order to update tracking visualization

    </script>

    <!-- Loader Overlay -->
    <div id="loader" class="loader-overlay">
        <div class="loader-spinner"></div>
        <p>Submitting Order...</p>
    </div>
</body>
</html>
        