<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Account Dashboard</title>
  
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    body {
  font-family: 'Inter', sans-serif;
  background: linear-gradient(135deg, #e0f2fe, #f0f9ff);
  color: #1e293b;
  margin: 0;
  padding: 0;
}

/* Navbar */
.navbar {
  background: rgba(30, 64, 175, 0.9);
  backdrop-filter: blur(12px);
  color: white;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 14px 28px;
  border-bottom: 2px solid rgba(255,255,255,0.2);
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}
.navbar img {
  width: 150px;
  height: 150px;
  
  
}
.navbar h2 {
  font-size: 22px;
  font-weight: 600;
}

/* Main Container */
.container {
  max-width: 1100px;
  margin: 50px auto;
  padding: 25px;
  background: rgba(255,255,255,0.8);
  border-radius: 20px;
  box-shadow: 0 8px 25px rgba(0,0,0,0.1);
}
h1 {
  text-align: center;
  color: #1e40af;
  font-size: 28px;
  margin-bottom: 35px;
  font-weight: 700;
  letter-spacing: 0.5px;
}

/* Search Input & Buttons */
#poSearch {
  border: 1px solid #cbd5e1;
  border-radius: 10px;
  padding: 8px 12px;
  outline: none;
  transition: all 0.2s ease;
}
#poSearch:focus {
  border-color: #3b82f6;
  box-shadow: 0 0 6px rgba(59,130,246,0.4);
}
button {
  border: none;
  padding: 8px 16px;
  border-radius: 5px;
  margin-right: 5px;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.3s ease;
}
button:hover {
  transform: translateY(-2px);
}

/* Table */
table {
  width: 100%;
  border-collapse: collapse;
  background: white;
  border-radius: 10px;
  overflow: hidden;
}
thead {
  background: linear-gradient(135deg, #2563eb, #3b82f6);
  color: white;
}
th, td {
  padding: 16px 20px;
  text-align: center;
}
tr {
  transition: background 0.2s ease, border-left 0.2s ease;
}
tr:hover {
  background: #f1f5f9;
  border-left: 4px solid #3b82f6;
}

/* Buttons */
.logout-btn {
  background: #ef4444;
  color: white;
}
.logout-btn:hover { background: #dc2626; }

.pay-btn { background: #22c55e; color: white; }
.pay-btn:hover { background: #16a34a; }

.paid-btn { background: #3b82f6; color: white; }
.paid-btn:hover { background: #2563eb; }

.download-btn { background: #14b8a6; color: white; }
.download-btn:hover { background: #0d9488; }

/* Modal */
.modal {
  display: none;
  position: fixed;
  inset: 0;
  background: rgba(0,0,0,0.5);
  justify-content: center;
  align-items: center;
  z-index: 1000;
}
.modal-content {
  background: rgba(255,255,255,0.7);
  backdrop-filter: blur(18px);
  padding: 30px;
  border-radius: 18px;
  width: 420px;
  box-shadow: 0 10px 30px rgba(0,0,0,0.25);
  text-align: center;
  animation: slideIn 0.4s ease;
}
.modal-content h2 {
  color: #1e40af;
  font-size: 22px;
  margin-bottom: 20px;
  font-weight: 600;
}
.close-btn {
  background: #ef4444;
  color: white;
  margin-top: 15px;
}
.close-btn:hover { background: #dc2626; }

/* Popups */
.done-popup, .error-popup {
  display: none;
  position: fixed;
  top: 20px;
  right: 20px;
  padding: 12px 20px;
  border-radius: 12px;
  font-size: 15px;
  font-weight: 600;
  box-shadow: 0 4px 15px rgba(0,0,0,0.25);
  animation: fadeInOut 3s ease forwards;
}
.done-popup { background: #16a34a; color: white; }
.error-popup { background: #dc2626; color: white; }

@keyframes slideIn {
  from { transform: translateY(-30px); opacity: 0; }
  to { transform: translateY(0); opacity: 1; }
}
@keyframes fadeInOut {
  0% { opacity: 0; transform: translateY(-10px); }
  10% { opacity: 1; transform: translateY(0); }
  90% { opacity: 1; }
  100% { opacity: 0; transform: translateY(-10px); }
}


  </style>
</head>
<body>
  <!-- Navbar -->
  <div class="navbar">
    <div class="logo">
      <img src="images/wt_img.png" alt="Company Logo">
    </div>
    <div class="user-section">
      <span><i class="fa fa-user"></i> accounts@kietsindia.com</span>
      <button class="logout-btn" onclick="logout()">Logout</button>
    </div>
  </div>

  <!-- Main Container -->
  <div class="container">
    <h1>Account Dashboard</h1>
    <!-- <div style="margin-bottom: 20px;">
      <label for="poSearch">Search by PO Number:</label>
      <input type="text" id="poSearch" placeholder="Enter PO Number" style="margin-left: 10px; padding: 5px;">
      <button onclick="searchByPO()" style="margin-left: 10px; padding: 5px 10px;">Search</button>
      <button onclick="clearSearch()" style="margin-left: 10px; padding: 5px 10px;">Clear</button>
    </div> -->
    <table>
      <thead>
        <tr>
          <th>PO Number</th>
          <th>Supplier</th>
          <th>Amount to Pay</th>
          <th>Terms to Pay</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody id="accountTableBody">
        <!-- Data will be populated here -->
      </tbody>
    </table>
    <div id="noDataMessage" style="text-align: center; margin-top: 20px; display: none;">
      No payment details found.
    </div>
  </div>

  <!-- Modal -->
  <div class="modal" id="paymentModal">
    <div class="modal-content">
      <h2>Supplier Bank Details</h2>
      <div class="bank-details" id="bankDetails"></div>
      <button class="close-btn" onclick="closeModal()">Close</button>
    </div>
  </div>

  <!-- Payment Done Popup -->
  <div class="done-popup" id="donePopup">
    ✅ Payment Done Successfully!
  </div>
  
  <!-- Error Popup -->
  <div class="error-popup" id="errorPopup">
    ❌ Error processing payment
  </div>

  <script>
    let accountData = [];
    let currentOrderId = null;

    async function fetchAccountDetails(poNumber = '') {
      try {
        document.getElementById('noDataMessage').style.display = 'none';
        
        let url = '/api/account-details';
        if (poNumber) {
          url += `?po_number=${encodeURIComponent(poNumber)}`;
        }
        
        const response = await fetch(url, { credentials: 'include' });
        
        if (response.status === 401) {
          alert('You are not logged in. Redirecting to login page.');
          window.location.href = '/';
          return;
        }
        
        if (!response.ok) {
          throw new Error('Failed to fetch account details');
        }
        
        const data = await response.json();
        
        if (data.message) {
          document.getElementById('noDataMessage').style.display = 'block';
          accountData = [];
          populateTable();
          return;
        }
        
        accountData = data;
        populateTable();
      } catch (error) {
        console.error('Error fetching account details:', error);
        document.getElementById('noDataMessage').style.display = 'block';
        accountData = [];
        populateTable();
      }
    }

    function searchByPO() {
      const poNumber = document.getElementById('poSearch').value.trim();
      fetchAccountDetails(poNumber);
    }

    function clearSearch() {
      document.getElementById('poSearch').value = '';
      fetchAccountDetails();
    }

    function populateTable() {
      const tbody = document.getElementById('accountTableBody');
      tbody.innerHTML = '';
      
      if (accountData.length === 0) {
        document.getElementById('noDataMessage').style.display = 'block';
        return;
      }
      
      document.getElementById('noDataMessage').style.display = 'none';
      
      accountData.forEach(item => {
        const tr = document.createElement('tr');

        // PO Number
        const poNumberTd = document.createElement('td');
        poNumberTd.setAttribute('data-label', 'PO Number');
        poNumberTd.textContent = item.po_number || 'N/A';
        tr.appendChild(poNumberTd);

        // Supplier
        const supplierTd = document.createElement('td');
        supplierTd.setAttribute('data-label', 'Supplier');
        supplierTd.textContent = item.supplier_name || 'N/A';
        tr.appendChild(supplierTd);

        // Amount
        const amountTd = document.createElement('td');
        amountTd.setAttribute('data-label', 'Amount to Pay');
        amountTd.textContent = `₹${item.amount ? parseFloat(item.amount).toFixed(2) : '0.00'}`;
        tr.appendChild(amountTd);

        // Terms
        const termsTd = document.createElement('td');
        termsTd.setAttribute('data-label', 'Terms to Pay');
        termsTd.textContent = item.terms_of_payment || 'N/A';
        tr.appendChild(termsTd);

        // Action buttons
        const actionTd = document.createElement('td');
        actionTd.setAttribute('data-label', 'Action');

        // Pay button
        const payBtn = document.createElement('button');
        payBtn.className = 'pay-btn';
        payBtn.textContent = 'View Bank Details';
        payBtn.onclick = () => openModal(item);
        actionTd.appendChild(payBtn);

        // Paid button
        const paidBtn = document.createElement('button');
        paidBtn.className = 'paid-btn';
        paidBtn.textContent = 'Mark as Paid';
        paidBtn.onclick = () => markAsPaid(item);
        actionTd.appendChild(paidBtn);

        // Download Invoice button
        const downloadBtn = document.createElement('button');
        downloadBtn.className = 'download-btn';
        downloadBtn.textContent = 'Download Invoice';
        downloadBtn.onclick = () => downloadInvoice(item.po_number);
        actionTd.appendChild(downloadBtn);

        tr.appendChild(actionTd);
        tbody.appendChild(tr);
      });
    }

    function openModal(item) {
      if (!item) return;
      const info = {
        account: item.supplier_account_number || 'N/A',
        ifsc: item.supplier_ifsc_code || 'N/A',
        bank: item.supplier_account_name || 'N/A'
      };
      document.getElementById('bankDetails').innerHTML = `
        <p><strong>Supplier:</strong> ${item.supplier_name || 'N/A'}</p>
        <p><strong>Account Number:</strong> ${info.account}</p>
        <p><strong>IFSC Code:</strong> ${info.ifsc}</p>
        <p><strong>Bank Name:</strong> ${info.bank}</p>
      `;
      document.getElementById('paymentModal').style.display = 'flex';
    }

    function closeModal() {
      document.getElementById('paymentModal').style.display = 'none';
    }

    async function markAsPaid(item) {
  if (!item.id) {
    showError('Order ID not found');
    return;
  }

  try {
    const response = await fetch(`/api/orders/${item.id}/status`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include',
      body: JSON.stringify({ status: 'paid' })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'Failed to update status');
    }

    const result = await response.json();

    if (result.success) {
      showSuccess();

      // ✅ Remove from local data
      accountData = accountData.filter(order => order.id !== item.id);

      // ✅ Refresh the table
      populateTable();
    } else {
      throw new Error('Status update failed');
    }
  } catch (error) {
    console.error('Error updating status:', error);
    showError(error.message || 'Error processing payment');
  }
}

    function removeOrderFromTable(orderId) {
      // Find and remove the table row containing this order
      const tableBody = document.getElementById('accountTableBody');
      const rows = tableBody.querySelectorAll('tr');

      rows.forEach(row => {
        // Check if this row contains the order with the matching ID
        // We need to find the row that has the order data matching this ID
        const actionCell = row.querySelector('td:last-child');
        if (actionCell) {
          const paidBtn = actionCell.querySelector('.paid-btn');
          if (paidBtn && paidBtn.onclick) {
            // Extract the item from the onclick function to check the ID
            const onclickString = paidBtn.onclick.toString();
            if (onclickString.includes(`item.id`) && onclickString.includes(orderId)) {
              row.remove();
              return;
            }
          }
        }
      });

      // Update the accountData array to remove this item
      accountData = accountData.filter(item => item.id !== orderId);

      // Check if table is now empty and show "no data" message if needed
      if (accountData.length === 0) {
        document.getElementById('noDataMessage').style.display = 'block';
      }
    }

    function showSuccess() {
      const popup = document.getElementById('donePopup');
      popup.style.display = 'block';
      setTimeout(() => { 
        popup.style.display = 'none'; 
      }, 3000);
    }
    
    function showError(message) {
      const popup = document.getElementById('errorPopup');
      popup.innerHTML = `❌ ${message}`;
      popup.style.display = 'block';
      setTimeout(() => { 
        popup.style.display = 'none'; 
      }, 3000);
    }

    function logout() {
      fetch('/api/logout', {
        method: 'POST',
        credentials: 'include'
      })
      .then(() => {
        window.location.href = '/';
      })
      .catch(err => {
        console.error('Logout error:', err);
        window.location.href = '/';
      });
    }

   function downloadInvoice(poNumber) {
  window.location.href = `/api/inventory-invoice/${poNumber}`;
}

    // Fetch account details on page load
    window.onload = fetchAccountDetails;
  </script>
</body>
</html>